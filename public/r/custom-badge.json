{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "custom-badge",
  "type": "registry:component",
  "title": "Custom Badge",
  "description": "A customizable badge component with color and style options.",
  "dependencies": [
    "tailwind-variants"
  ],
  "files": [
    {
      "path": "registry/new-york/custom-badge/CustomBadge.tsx",
      "type": "registry:component",
      "content": "import * as React from \"react\";\nimport { tv } from \"tailwind-variants\";\nimport { cn } from \"@/lib/utils\";\nimport { ReactFC } from \"@/lib/utils\";\nimport { processColor } from \"@/lib/utils\";\n\nconst badge = tv({\n  base: \"flex items-center justify-center gap-1.5 rounded-md font-semibold transition-colors\",\n  variants: {\n    variant: {\n      default:\n        \"bg-(--badge-color)/20 text-(--badge-color) dark:bg-(--badge-dark-color)/20 dark:text-(--badge-dark-color)\",\n      outline:\n        \"bg-(--badge-color)/10 border-1 border-(--badge-color)/30 text-(--badge-color) dark:bg-(--badge-dark-color)/10 dark:border-(--badge-dark-color)/30 dark:text-(--badge-dark-color)\",\n      ghost:\n        \"text-(--badge-color) hover:bg-(--badge-color)/10 dark:text-(--badge-dark-color) dark:hover:bg-(--badge-dark-color)/10\",\n    },\n    size: {\n      xs: \"px-1.5 py-[2px] text-[9px]\",\n      sm: \"px-2 py-0.5 text-xs\",\n      md: \"px-2.5 py-1 text-xs\",\n      lg: \"px-3 py-1 text-sm\",\n      xl: \"px-3.5 py-1.5 text-sm\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"sm\",\n  },\n});\n\nexport type BadgeSize = \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\n\nexport interface BadgeClassNames {\n  root?: string;\n  icon?: string;\n}\n\nconst iconSizeMap: Record<BadgeSize, number> = {\n  xs: 10,\n  sm: 12,\n  md: 12,\n  lg: 14,\n  xl: 14,\n};\n\nexport interface CustomBadgeProps extends React.HTMLAttributes<HTMLDivElement> {\n  classNames?: BadgeClassNames;\n  color: string;\n  darkColor?: string;\n  variant?: \"default\" | \"outline\" | \"ghost\";\n  size?: BadgeSize;\n  icon?: React.ElementType;\n  iconSize?: number;\n  leftIcon?: React.ElementType;\n  rightIcon?: React.ElementType;\n  leftSide?: React.ReactNode;\n  rightSide?: React.ReactNode;\n}\n\nexport const CustomBadge: ReactFC<CustomBadgeProps> = ({\n  className,\n  variant,\n  size = \"sm\",\n  color,\n  darkColor = color,\n  classNames = {},\n  icon: Icon,\n  iconSize,\n  leftIcon: LeftIcon,\n  rightIcon: RightIcon,\n  leftSide,\n  rightSide,\n  children,\n  ...props\n}) => {\n  const finalColor = processColor(color);\n  const finalDarkColor = processColor(darkColor);\n  const defaultIconSize = iconSizeMap[size];\n  const finalIconSize = iconSize ?? defaultIconSize;\n\n  const style = {\n    \"--badge-color\": `var(--color-${finalColor})`,\n    \"--badge-dark-color\": `var(--color-${finalDarkColor ?? finalColor})`,\n  } as React.CSSProperties;\n\n  const renderIcon = (\n    IconComponent: React.ElementType | undefined,\n    className?: string\n  ) =>\n    IconComponent && (\n      <IconComponent\n        size={finalIconSize}\n        className={cn(classNames.icon, \"shrink-0\", className)}\n      />\n    );\n\n  return (\n    <div\n      style={style}\n      className={cn(badge({ variant, size }), className, classNames.root)}\n      {...props}\n    >\n      {leftSide || renderIcon(LeftIcon)}\n      {Icon ? renderIcon(Icon) : children}\n      {rightSide || renderIcon(RightIcon)}\n    </div>\n  );\n};\n",
      "target": "components/CustomBadge.tsx"
    }
  ]
}