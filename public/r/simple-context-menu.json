{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "simple-context-menu",
  "type": "registry:component",
  "title": "Simple Context Menu",
  "description": "A simple context menu component that wraps content with right-click menu functionality",
  "registryDependencies": [
    "https://ui.kitze.io/r/simple-tooltip.json",
    "https://ui.kitze.io/r/simple-dropdown-menu.json",
    "https://ui.kitze.io/r/bottom-drawer.json",
    "https://ui.kitze.io/r/menu-context.json",
    "https://ui.kitze.io/r/kitze-ui-context.json"
  ],
  "dependencies": [
    "use-long-press"
  ],
  "files": [
    {
      "path": "registry/new-york/simple-context-menu/SimpleContextMenu.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { cn, ReactFC } from \"@/lib/utils\";\nimport {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuTrigger,\n} from \"@/components/ui/context-menu\";\nimport { MenuProvider } from \"@/registry/new-york/menu-context/MenuContext\";\nimport { useControlledOpen } from \"@/registry/hooks/useControlledOpen\";\n\nexport interface SimpleContextMenuClassNames {\n  content?: string;\n}\n\nexport interface SimpleContextMenuProps {\n  children: React.ReactNode;\n  content: React.ReactNode;\n  classNames?: SimpleContextMenuClassNames;\n  closeOnClick?: boolean;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\nexport const SimpleContextMenu: ReactFC<SimpleContextMenuProps> = ({\n  children,\n  content,\n  classNames = {},\n  closeOnClick = true,\n  open,\n  onOpenChange,\n}) => {\n  // Use the controlled open state but don't apply it directly to ContextMenu\n  // because radix context menu doesn't support controlled state\n  useControlledOpen({\n    open,\n    onOpenChange,\n  });\n\n  // Function to close the menu when clicking on menu items\n  const closeMenu = () => {\n    if (closeOnClick && onOpenChange) {\n      onOpenChange(false);\n    }\n  };\n\n  // Prevent text selection on long press for mobile\n  const preventTextSelection = (e: React.TouchEvent) => {\n    e.preventDefault();\n  };\n\n  return (\n    <MenuProvider menuType=\"context\" closeMenu={closeMenu}>\n      <ContextMenu>\n        <ContextMenuTrigger asChild>\n          <div className=\"select-none\" onTouchStart={preventTextSelection}>\n            {children}\n          </div>\n        </ContextMenuTrigger>\n        <ContextMenuContent className={cn(classNames.content, \"select-none\")}>\n          {content}\n        </ContextMenuContent>\n      </ContextMenu>\n    </MenuProvider>\n  );\n};\n"
    },
    {
      "path": "registry/new-york/simple-context-menu/ResponsiveContextMenu.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport { SimpleContextMenu, SimpleContextMenuProps } from \"./SimpleContextMenu\";\nimport { BottomDrawer } from \"@/registry/new-york/bottom-drawer/BottomDrawer\";\nimport { MenuProvider } from \"@/registry/new-york/menu-context/MenuContext\";\nimport { useKitzeUI } from \"@/registry/new-york/kitze-ui-context/KitzeUIContext\";\nimport { useLongPress } from \"use-long-press\";\nimport { useControlledOpen } from \"@/registry/hooks/useControlledOpen\";\n\nexport interface ResponsiveContextMenuProps extends SimpleContextMenuProps {\n  drawerTitle?: string;\n  closeOnClick?: boolean;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\nexport const ResponsiveContextMenu: ReactFC<ResponsiveContextMenuProps> = ({\n  children,\n  content,\n  drawerTitle,\n  closeOnClick = true,\n  open,\n  onOpenChange,\n  classNames = {},\n}) => {\n  const { isMobile } = useKitzeUI();\n  const { isOpen, setIsOpen, close } = useControlledOpen({\n    open,\n    onOpenChange,\n  });\n\n  // Function to close the menu when clicking on menu items\n  const closeMenu = () => {\n    if (closeOnClick) {\n      close();\n    }\n  };\n\n  // Only use long press detection on mobile\n  const bind = useLongPress(\n    () => {\n      if (isMobile) {\n        setIsOpen(true);\n      }\n    },\n    {\n      onCancel: () => {\n        // No operation needed on cancel\n      },\n      // Only detect long press on mobile\n      filterEvents: () => isMobile,\n      // Prevent context menu from showing on mobile\n      cancelOnMovement: false,\n      // Standard duration for mobile long press\n      threshold: 500,\n      // Prevent any default browser behavior\n      captureEvent: true,\n    }\n  );\n\n  // Only include context menu on desktop\n  if (!isMobile) {\n    return (\n      <SimpleContextMenu content={content} classNames={classNames}>\n        {children}\n      </SimpleContextMenu>\n    );\n  }\n\n  // On mobile, use long press to trigger bottom drawer\n  return (\n    <>\n      <div className=\"select-none\" {...bind()}>\n        {children}\n      </div>\n\n      <BottomDrawer\n        open={isOpen}\n        onOpenChange={setIsOpen}\n        title={drawerTitle}\n        trigger={null}\n      >\n        <MenuProvider menuType=\"bottom-drawer\" closeMenu={closeMenu}>\n          <div className=\"flex flex-col\">{content}</div>\n        </MenuProvider>\n      </BottomDrawer>\n    </>\n  );\n};\n"
    },
    {
      "path": "registry/hooks/useControlledOpen.ts",
      "type": "registry:hook",
      "content": "import { useState, useEffect } from \"react\";\n\ninterface UseControlledOpenProps {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\ninterface UseControlledOpenResult {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  close: () => void;\n}\n\nexport const useControlledOpen = ({\n  open,\n  onOpenChange,\n}: UseControlledOpenProps): UseControlledOpenResult => {\n  const [internalOpen, setInternalOpen] = useState(false);\n\n  // Determine if the component is controlled or uncontrolled\n  const isControlled = open !== undefined;\n  const isOpen = isControlled ? open : internalOpen;\n\n  const setIsOpen = (newOpen: boolean) => {\n    if (!isControlled) {\n      setInternalOpen(newOpen);\n    }\n    if (onOpenChange) {\n      onOpenChange(newOpen);\n    }\n  };\n\n  const close = () => setIsOpen(false);\n\n  // Sync internal state with controlled prop\n  useEffect(() => {\n    if (isControlled) {\n      setInternalOpen(open);\n    }\n  }, [isControlled, open]);\n\n  return { isOpen, setIsOpen, close };\n};\n"
    },
    {
      "path": "registry/hooks/useLinkableComponent.ts",
      "type": "registry:hook",
      "content": "import Link from \"next/link\";\n\nexport interface LinkableProps {\n  href?: string;\n  external?: boolean;\n  target?: string;\n  rel?: string;\n}\n\nexport function useLinkableComponent<T extends LinkableProps>(props: T) {\n  const { href, external, ...rest } = props;\n\n  const linkProps = {\n    ...rest,\n    ...(external && {\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n    }),\n  };\n\n  const Component = href ? (external ? \"a\" : Link) : \"div\";\n\n  return {\n    Component,\n    href,\n    linkProps,\n  };\n}\n"
    }
  ]
}