{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "simple-context-menu",
  "type": "registry:component",
  "title": "Simple Context Menu",
  "description": "A simple context menu component that wraps content with right-click menu functionality",
  "registryDependencies": [
    "https://ui.kitze.io/r/simple-tooltip.json",
    "https://ui.kitze.io/r/simple-dropdown-menu.json",
    "https://ui.kitze.io/r/bottom-drawer.json",
    "https://ui.kitze.io/r/menu-context.json",
    "https://ui.kitze.io/r/kitze-ui-context.json"
  ],
  "dependencies": [
    "use-long-press"
  ],
  "files": [
    {
      "path": "registry/new-york/simple-context-menu/SimpleContextMenu.tsx",
      "type": "registry:component",
      "target": "components",
      "content": "import React from \"react\";\nimport { cn, ReactFC } from \"@/lib/utils\";\nimport {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuTrigger,\n} from \"@/components/ui/context-menu\";\nimport { MenuProvider } from \"@/registry/new-york/menu-context/MenuContext\";\nimport { useControlledOpen } from \"@/registry/hooks/useControlledOpen\";\nimport { useKitzeUI } from \"@/registry/new-york/kitze-ui-context/KitzeUIContext\";\nimport { useLongPress } from \"use-long-press\";\nimport { BottomDrawerMenu } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenu\";\n\n// Define MobileViewType for ContextMenu\nexport type ContextMenuMobileViewType = \"keep\" | \"bottom-drawer\";\n\nexport interface SimpleContextMenuClassNames {\n  content?: string;\n  drawerContent?: string; // Optional class for drawer content wrapper\n}\n\nexport interface SimpleContextMenuProps {\n  children: React.ReactNode; // The element that triggers the menu\n  content: React.ReactNode; // The menu content\n  classNames?: SimpleContextMenuClassNames;\n  closeOnClick?: boolean;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  // Mobile specific props\n  mobileView?: ContextMenuMobileViewType;\n  drawerTitle?: string;\n}\n\nexport const SimpleContextMenu: ReactFC<SimpleContextMenuProps> = ({\n  children,\n  content,\n  classNames = {},\n  closeOnClick = true,\n  open,\n  onOpenChange,\n  mobileView = \"keep\",\n  drawerTitle,\n}) => {\n  const { isMobile } = useKitzeUI();\n  const { isOpen, setIsOpen, close } = useControlledOpen({\n    open,\n    onOpenChange,\n  });\n\n  // Function to close the menu when clicking on menu items\n  const closeMenu = () => {\n    if (closeOnClick) {\n      close(); // Close controlled state\n    }\n  };\n\n  // Long press binding for mobile drawer trigger\n  const bind = useLongPress(\n    () => {\n      // Only open drawer if mobileView is set and we're on mobile\n      if (isMobile && mobileView === \"bottom-drawer\") {\n        setIsOpen(true);\n      }\n    },\n    {\n      // Only detect long press on mobile when drawer is the intended view\n      filterEvents: () => isMobile && mobileView === \"bottom-drawer\",\n      cancelOnMovement: false,\n      threshold: 500,\n      captureEvent: true, // Prevent default context menu on mobile long press\n    }\n  );\n\n  // --- Mobile Rendering (Bottom Drawer via Long Press) ---\n  if (isMobile && mobileView === \"bottom-drawer\") {\n    return (\n      <>\n        {/* Bind long press to the children wrapper */}\n        <div className=\"select-none\" {...bind()}>\n          {children}\n        </div>\n        {/* Drawer renders separately and is controlled by isOpen state */}\n        <BottomDrawerMenu\n          open={isOpen}\n          onOpenChange={setIsOpen}\n          title={drawerTitle}\n          closeOnClick={closeOnClick}\n          content={content}\n        >\n          {/* Trigger is handled by the long press bind, no visual trigger needed here */}\n          {null}\n        </BottomDrawerMenu>\n      </>\n    );\n  }\n\n  // --- Default Context Menu Rendering (Desktop or mobileView='keep') ---\n  // Note: Radix ContextMenu doesn't easily support controlled open state.\n  // We use the hook for onOpenChange handling but let Radix manage open internally.\n  return (\n    <MenuProvider menuType=\"context\" closeMenu={closeMenu}>\n      <ContextMenu onOpenChange={onOpenChange}>\n        {\" \"}\n        {/* Pass onOpenChange if provided */}\n        <ContextMenuTrigger asChild>\n          {/* We need a div wrapper for long press prevention even if not using drawer */}\n          <div className=\"select-none\" {...bind()}>\n            {children}\n          </div>\n        </ContextMenuTrigger>\n        <ContextMenuContent className={cn(classNames.content, \"select-none\")}>\n          {content}\n        </ContextMenuContent>\n      </ContextMenu>\n    </MenuProvider>\n  );\n};\n"
    },
    {
      "path": "registry/new-york/simple-context-menu/ResponsiveContextMenu.tsx",
      "type": "registry:component",
      "target": "components",
      "content": "/* File not found: registry/new-york/simple-context-menu/ResponsiveContextMenu.tsx */"
    }
  ]
}