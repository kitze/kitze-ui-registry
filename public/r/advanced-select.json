{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "advanced-select",
  "type": "registry:component",
  "title": "Advanced Select",
  "description": "A multi-select component with search capabilities, multiple selection as badges, and animations",
  "registryDependencies": [
    "popover",
    "command",
    "separator",
    "badge",
    "button"
  ],
  "dependencies": [
    "class-variance-authority",
    "cmdk",
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/new-york/advanced-select/AdvancedSelect.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { CheckIcon, ChevronDown, XIcon } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\";\nimport { SelectOption } from \"@/lib/select-option\";\n\n/**\n * Variants for the advanced-select component to handle different styles.\n */\nconst advancedSelectVariants = cva(\"m-1\", {\n  variants: {\n    variant: {\n      default: \"border-foreground/10 text-foreground bg-card hover:bg-card/80\",\n      secondary:\n        \"border-foreground/10 bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n      destructive:\n        \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n      inverted: \"inverted\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nexport type AdvancedSelectOption = SelectOption;\n\n/**\n * Props for AdvancedSelect component\n */\nexport interface AdvancedSelectProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof advancedSelectVariants> {\n  /**\n   * An array of option objects to be displayed in the advanced-select component.\n   */\n  options: AdvancedSelectOption[];\n\n  /**\n   * Callback function triggered when the selected values change.\n   * Receives an array of the new selected values.\n   */\n  onValueChange?: (value: string[]) => void;\n\n  /** The current selected values. */\n  value?: string[];\n\n  /** The default selected values when the component mounts. */\n  defaultValue?: string[];\n\n  /**\n   * Whether to show a search input in the dropdown.\n   * Default is false.\n   */\n  searchable?: boolean;\n\n  /**\n   * Placeholder text to be displayed when no values are selected.\n   * Optional, defaults to \"Select options\".\n   */\n  placeholder?: string;\n\n  /**\n   * Maximum number of items to display. Extra selected items will be summarized.\n   * Optional, defaults to 3.\n   */\n  maxCount?: number;\n\n  /**\n   * The modality of the popover. When set to true, interaction with outside elements\n   * will be disabled and only popover content will be visible to screen readers.\n   * Optional, defaults to false.\n   */\n  modalPopover?: boolean;\n\n  /**\n   * If true, renders the advanced-select component as a child of another component.\n   * Optional, defaults to false.\n   */\n  asChild?: boolean;\n\n  /**\n   * Additional class names to apply custom styles to the advanced-select component.\n   */\n  className?: string;\n\n  /**\n   * Icon to show on the left side of the select trigger.\n   */\n  leftIcon?: React.ElementType;\n\n  /**\n   * Icon to show on the right side of the select trigger (replaces the default chevron).\n   */\n  rightIcon?: React.ElementType;\n\n  /**\n   * Whether the component is in a loading state.\n   */\n  loading?: boolean;\n\n  /**\n   * Callback function triggered when a user wants to create a new option.\n   * If provided, a \"Create new\" option will be shown in the dropdown when search doesn't match.\n   */\n  onCreate?: (value: string) => void;\n}\n\nexport const AdvancedSelect = React.forwardRef<\n  HTMLButtonElement,\n  AdvancedSelectProps\n>(\n  (\n    {\n      options,\n      onValueChange,\n      value: controlledValue,\n      variant,\n      defaultValue = [],\n      searchable = false,\n      placeholder = \"Select options\",\n      maxCount = 3,\n      modalPopover = false,\n      asChild = false,\n      className,\n      leftIcon: LeftIcon,\n      rightIcon: RightIcon,\n      loading = false,\n      onCreate,\n      ...props\n    },\n    ref\n  ) => {\n    // Handle controlled vs uncontrolled state\n    const [selectedValues, setSelectedValues] = React.useState<string[]>(\n      controlledValue || defaultValue\n    );\n\n    // Keep internal state synced with controlled value\n    React.useEffect(() => {\n      if (controlledValue !== undefined) {\n        setSelectedValues(controlledValue);\n      }\n    }, [controlledValue]);\n\n    const [isPopoverOpen, setIsPopoverOpen] = React.useState(false);\n    const [searchQuery, setSearchQuery] = React.useState(\"\");\n\n    const handleInputKeyDown = (\n      event: React.KeyboardEvent<HTMLInputElement>\n    ) => {\n      if (event.key === \"Enter\") {\n        setIsPopoverOpen(true);\n      } else if (event.key === \"Backspace\" && !event.currentTarget.value) {\n        const newSelectedValues = [...selectedValues];\n        newSelectedValues.pop();\n        updateValues(newSelectedValues);\n      }\n    };\n\n    // Update values and search handling\n    const handleSearchChange = (value: string) => {\n      setSearchQuery(value);\n    };\n\n    // Update both internal state and call onValueChange prop\n    const updateValues = (newValues: string[]) => {\n      if (controlledValue === undefined) {\n        setSelectedValues(newValues);\n      }\n      onValueChange?.(newValues);\n    };\n\n    const toggleOption = (option: string) => {\n      const newSelectedValues = selectedValues.includes(option)\n        ? selectedValues.filter((value) => value !== option)\n        : [...selectedValues, option];\n      updateValues(newSelectedValues);\n    };\n\n    const handleClear = () => {\n      updateValues([]);\n    };\n\n    const handleTogglePopover = () => {\n      setIsPopoverOpen((prev) => !prev);\n    };\n\n    const clearExtraOptions = () => {\n      const newSelectedValues = selectedValues.slice(0, maxCount);\n      updateValues(newSelectedValues);\n    };\n\n    const toggleAll = () => {\n      if (selectedValues.length === options.length) {\n        handleClear();\n      } else {\n        const allValues = options.map((option) => option.value);\n        updateValues(allValues);\n      }\n    };\n\n    // Direct handler for option selection, not relying on CommandItem's onSelect\n    const handleOptionClick = (\n      optionValue: string,\n      event: React.MouseEvent\n    ) => {\n      event.preventDefault();\n      event.stopPropagation();\n      toggleOption(optionValue);\n    };\n\n    // Handler for Select All\n    const handleSelectAllClick = (event: React.MouseEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n      toggleAll();\n    };\n\n    // Handler for Clear button\n    const handleClearClick = (event: React.MouseEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n      handleClear();\n    };\n\n    // Handler for Close button\n    const handleCloseClick = (event: React.MouseEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n      setIsPopoverOpen(false);\n    };\n\n    // Filter options based on search query\n    const filteredOptions =\n      searchable && searchQuery\n        ? options.filter((option) =>\n            (option.label || option.value)\n              .toLowerCase()\n              .includes(searchQuery.toLowerCase())\n          )\n        : options;\n\n    // Animation variants\n    const badgeAnimationVariants = {\n      initial: { opacity: 0, scale: 0.8 },\n      animate: { opacity: 1, scale: 1, transition: { duration: 0.2 } },\n      exit: { opacity: 0, scale: 0.8, transition: { duration: 0.15 } },\n    };\n\n    const contentAnimationVariants = {\n      hidden: { opacity: 0, y: -5 },\n      visible: { opacity: 1, y: 0, transition: { duration: 0.2 } },\n    };\n\n    const optionAnimationVariants = {\n      hidden: { opacity: 0 },\n      visible: (custom: number) => ({\n        opacity: 1,\n        transition: { delay: custom * 0.03 },\n      }),\n    };\n\n    // Add a handleMiddleClick handler\n    const handleMiddleClick = (\n      value: string,\n      event: React.MouseEvent<HTMLDivElement>\n    ) => {\n      if (event.button === 1) {\n        // Middle click\n        event.preventDefault();\n        toggleOption(value);\n      }\n    };\n\n    // Handle create new option\n    const handleCreateOption = () => {\n      if (onCreate && searchQuery.trim()) {\n        onCreate(searchQuery.trim());\n        setSearchQuery(\"\");\n      }\n    };\n\n    return (\n      <Popover\n        open={isPopoverOpen}\n        onOpenChange={setIsPopoverOpen}\n        modal={modalPopover}\n      >\n        <PopoverTrigger asChild>\n          <Button\n            ref={ref}\n            {...props}\n            onClick={handleTogglePopover}\n            disabled={loading || props.disabled}\n            className={cn(\n              \"flex w-full p-1 rounded-md border min-h-10 h-auto items-center justify-between bg-inherit hover:bg-inherit [&_svg]:pointer-events-auto transition-all duration-200\",\n              loading && \"cursor-not-allowed opacity-50\",\n              className\n            )}\n            data-slot=\"advanced-select-trigger\"\n          >\n            <div className=\"w-full flex justify-between items-center\">\n              <div className=\"flex-1 min-h-[28px] flex items-center pl-2\">\n                {loading ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"h-4 w-4 border-2 border-primary border-t-transparent rounded-full animate-spin mr-2\" />\n                    <span className=\"text-muted-foreground\">Loading...</span>\n                  </div>\n                ) : (\n                  <>\n                    {LeftIcon && (\n                      <LeftIcon className=\"h-4 w-4 mr-2 text-muted-foreground shrink-0\" />\n                    )}\n                    {selectedValues.length > 0 ? (\n                      <div className=\"flex flex-wrap items-center gap-1 w-full\">\n                        <AnimatePresence>\n                          {selectedValues\n                            .slice(0, maxCount)\n                            .map((value, index) => {\n                              const option = options.find(\n                                (o) => o.value === value\n                              );\n                              const IconComponent = option?.icon;\n                              return (\n                                <motion.div\n                                  key={value}\n                                  variants={badgeAnimationVariants}\n                                  initial=\"initial\"\n                                  animate=\"animate\"\n                                  exit=\"exit\"\n                                  layout\n                                  onMouseDown={(e) =>\n                                    handleMiddleClick(value, e)\n                                  }\n                                >\n                                  <Badge\n                                    className={cn(\n                                      advancedSelectVariants({ variant })\n                                    )}\n                                    data-slot=\"advanced-select-badge\"\n                                  >\n                                    {IconComponent && (\n                                      <IconComponent className=\"h-4 w-4 mr-2\" />\n                                    )}\n                                    {option?.emoji && (\n                                      <span className=\"mr-2\">\n                                        {option.emoji}\n                                      </span>\n                                    )}\n                                    {option?.label || option?.value}\n                                    <XIcon\n                                      className=\"ml-2 h-3 w-3 cursor-pointer opacity-70 hover:opacity-100\"\n                                      onClick={(event) => {\n                                        event.stopPropagation();\n                                        toggleOption(value);\n                                      }}\n                                    />\n                                  </Badge>\n                                </motion.div>\n                              );\n                            })}\n                        </AnimatePresence>\n                        {selectedValues.length > maxCount && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ duration: 0.3 }}\n                          >\n                            <Badge\n                              variant=\"outline\"\n                              className=\"ml-1\"\n                              onClick={clearExtraOptions}\n                            >\n                              +{selectedValues.length - maxCount} more\n                            </Badge>\n                          </motion.div>\n                        )}\n                      </div>\n                    ) : (\n                      <div className=\"text-muted-foreground truncate px-2\">\n                        {placeholder}\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n              <div className=\"shrink-0 ml-2 pr-2 flex items-center justify-center\">\n                {RightIcon ? (\n                  <RightIcon className=\"h-5 w-5 text-foreground\" />\n                ) : (\n                  <ChevronDown className=\"h-4 w-4 opacity-50\" />\n                )}\n              </div>\n            </div>\n          </Button>\n        </PopoverTrigger>\n\n        <PopoverContent\n          className=\"w-auto p-0\"\n          align=\"start\"\n          onEscapeKeyDown={() => setIsPopoverOpen(false)}\n          data-slot=\"advanced-select-content\"\n          asChild\n        >\n          <motion.div\n            initial=\"hidden\"\n            animate=\"visible\"\n            variants={contentAnimationVariants}\n            className=\"w-[var(--radix-popover-trigger-width)]\"\n            style={{\n              width: \"var(--radix-popover-trigger-width)\",\n              maxWidth: \"calc(100vw - 32px)\",\n            }}\n          >\n            <Command shouldFilter={false}>\n              {searchable && (\n                <CommandInput\n                  placeholder=\"Search...\"\n                  onKeyDown={handleInputKeyDown}\n                  onValueChange={handleSearchChange}\n                  value={searchQuery}\n                  data-slot=\"advanced-select-search\"\n                />\n              )}\n              <CommandList className=\"max-h-[300px]\">\n                {searchable &&\n                  filteredOptions.length === 0 &&\n                  searchQuery &&\n                  onCreate && (\n                    <CommandEmpty className=\"py-0\">\n                      <div\n                        className=\"flex items-center px-2 py-1.5 text-sm cursor-pointer hover:bg-accent hover:text-accent-foreground\"\n                        onClick={handleCreateOption}\n                      >\n                        <div className=\"mr-2 flex h-4 w-4 items-center justify-center rounded-sm\">\n                          <span className=\"text-xl\">+</span>\n                        </div>\n                        Create \"{searchQuery}\"\n                      </div>\n                    </CommandEmpty>\n                  )}\n                {searchable &&\n                  filteredOptions.length === 0 &&\n                  (!searchQuery || !onCreate) && (\n                    <CommandEmpty className=\"py-1.5\">\n                      No results found.\n                    </CommandEmpty>\n                  )}\n\n                <CommandGroup>\n                  {!searchable && (\n                    <>\n                      <motion.div\n                        variants={optionAnimationVariants}\n                        initial=\"hidden\"\n                        animate=\"visible\"\n                        custom={0}\n                        className=\"flex items-center px-2 py-1.5 text-sm rounded-sm cursor-pointer relative select-none hover:bg-accent hover:text-accent-foreground\"\n                        onClick={handleSelectAllClick}\n                        data-select-all=\"true\"\n                      >\n                        <div\n                          className={cn(\n                            \"mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary\",\n                            selectedValues.length === options.length\n                              ? \"bg-primary text-primary-foreground\"\n                              : \"opacity-50 [&_svg]:invisible\"\n                          )}\n                        >\n                          <CheckIcon className=\"h-4 w-4\" />\n                        </div>\n                        <span>(Select All)</span>\n                      </motion.div>\n                      <CommandSeparator />\n                    </>\n                  )}\n                  {filteredOptions.map((option, index) => {\n                    const isSelected = selectedValues.includes(option.value);\n                    const IconComponent = option.icon;\n                    return (\n                      <motion.div\n                        key={option.value}\n                        variants={optionAnimationVariants}\n                        initial=\"hidden\"\n                        animate=\"visible\"\n                        custom={index + 1}\n                        className={cn(\n                          \"flex items-center px-2 py-1.5 text-sm rounded-sm cursor-pointer relative select-none transition-colors\",\n                          isSelected\n                            ? \"bg-accent text-accent-foreground\"\n                            : \"hover:bg-accent hover:text-accent-foreground\"\n                        )}\n                        onClick={(event) =>\n                          handleOptionClick(option.value, event)\n                        }\n                        onMouseDown={(e) => {\n                          if (e.button === 1) {\n                            // Middle click\n                            e.preventDefault();\n                            toggleOption(option.value);\n                          }\n                        }}\n                      >\n                        <div\n                          className={cn(\n                            \"mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary\",\n                            isSelected\n                              ? \"bg-primary text-primary-foreground\"\n                              : \"opacity-50 [&_svg]:invisible\"\n                          )}\n                        >\n                          <CheckIcon className=\"h-4 w-4\" />\n                        </div>\n                        {IconComponent && (\n                          <IconComponent className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n                        )}\n                        {option.emoji && (\n                          <span className=\"mr-2\">{option.emoji}</span>\n                        )}\n                        <span>{option.label || option.value}</span>\n                      </motion.div>\n                    );\n                  })}\n                  {searchable &&\n                    onCreate &&\n                    searchQuery &&\n                    filteredOptions.length > 0 &&\n                    !filteredOptions.some(\n                      (option) =>\n                        option.label?.toLowerCase() ===\n                          searchQuery.toLowerCase() ||\n                        option.value.toLowerCase() === searchQuery.toLowerCase()\n                    ) && (\n                      <motion.div\n                        variants={optionAnimationVariants}\n                        initial=\"hidden\"\n                        animate=\"visible\"\n                        custom={filteredOptions.length + 1}\n                        className=\"flex items-center px-2 py-1.5 text-sm rounded-sm cursor-pointer relative select-none transition-colors hover:bg-accent hover:text-accent-foreground\"\n                        onClick={handleCreateOption}\n                      >\n                        <div className=\"mr-2 flex h-4 w-4 items-center justify-center rounded-sm\">\n                          <span className=\"text-xl\">+</span>\n                        </div>\n                        <span>Create \"{searchQuery}\"</span>\n                      </motion.div>\n                    )}\n                </CommandGroup>\n\n                <CommandGroup>\n                  <div className=\"flex items-center justify-between\">\n                    {selectedValues.length > 0 && (\n                      <>\n                        <motion.div\n                          whileHover={{ scale: 1.05 }}\n                          whileTap={{ scale: 0.95 }}\n                          className=\"flex-1 justify-center cursor-pointer py-1.5 text-sm text-center hover:bg-accent hover:text-accent-foreground\"\n                          onClick={handleClearClick}\n                        >\n                          Clear\n                        </motion.div>\n                        <Separator\n                          orientation=\"vertical\"\n                          className=\"flex min-h-6 h-full\"\n                        />\n                      </>\n                    )}\n                    <motion.div\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                      className=\"flex-1 justify-center cursor-pointer py-1.5 text-sm text-center hover:bg-accent hover:text-accent-foreground\"\n                      onClick={handleCloseClick}\n                    >\n                      Close\n                    </motion.div>\n                  </div>\n                </CommandGroup>\n              </CommandList>\n            </Command>\n          </motion.div>\n        </PopoverContent>\n      </Popover>\n    );\n  }\n);\n\nAdvancedSelect.displayName = \"AdvancedSelect\";\n"
    }
  ]
}