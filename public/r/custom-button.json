{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "custom-button",
  "type": "registry:component",
  "title": "Custom Button",
  "description": "A customizable button component with various styles, sizes, and features like loading state and icon support",
  "dependencies": [
    "class-variance-authority"
  ],
  "registryDependencies": [
    "https://ui.kitze.io/r/conditional-tooltip.json",
    "https://ui.kitze.io/r/spinner.json"
  ],
  "files": [
    {
      "path": "registry/new-york/custom-button/CustomButton.tsx",
      "type": "registry:component",
      "content": "import * as React from \"react\";\nimport { cn, ReactFC } from \"@/lib/utils\";\nimport { useLinkableComponent } from \"@/registry/hooks/useLinkableComponent\";\nimport { ConditionalTooltip } from \"@/registry/new-york/conditional-tooltip/ConditionalTooltip\";\nimport { Spinner } from \"@/registry/new-york/spinner/Spinner\";\n\n// CSS custom properties for button sizes\nconst buttonSizeCSSVars = `\n:root {\n  --btn-size-xs: 1.5rem; /* 24px */\n  --btn-size-sm: 2rem; /* 32px */\n  --btn-size-md: 2.25rem; /* 36px */\n  --btn-size-lg: 2.75rem; /* 44px */\n}\n`;\n\n// Add the CSS variables to the document\nif (typeof document !== \"undefined\") {\n  const style = document.createElement(\"style\");\n  style.textContent = buttonSizeCSSVars;\n  document.head.appendChild(style);\n}\n\ntype SizeStyle = {\n  iconSize?: number;\n};\n\nexport const sizeStyles: Record<CustomButtonSize, SizeStyle> = {\n  xs: {\n    iconSize: 14,\n  },\n  sm: {\n    iconSize: 16,\n  },\n  md: {\n    iconSize: 16,\n  },\n  lg: {\n    iconSize: 20,\n  },\n};\n\nexport const spinnerSizeMap: Record<CustomButtonSize, number> = {\n  xs: 14,\n  sm: 16,\n  md: 16,\n  lg: 20,\n};\n\nexport const defaultIconSizes: Record<CustomButtonSize, number> = {\n  xs: 14,\n  sm: 16,\n  md: 16,\n  lg: 20,\n};\n\nimport { cva } from \"class-variance-authority\";\nimport type { VariantProps } from \"class-variance-authority\";\n\nexport const buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md font-medium transition-all cursor-pointer active:scale-95 focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-[var(--button-bg)] text-[var(--button-text)] hover:opacity-90\",\n        outline:\n          \"border border-[var(--button-bg)/20]/20 text-[var(--button-bg)] bg-transparent hover:bg-[var(--button-bg)]/5\",\n        ghost:\n          \"text-[var(--button-bg)] bg-transparent hover:bg-[var(--button-bg)/20]\",\n        link: \"text-[var(--button-bg)] underline-offset-4 hover:underline\",\n      },\n      size: {\n        xs: \"text-xs\",\n        sm: \"text-sm\",\n        md: \"text-sm\",\n        lg: \"text-base\",\n      },\n      shape: {\n        default: \"rounded-md\",\n        circle: \"rounded-full aspect-square\",\n      },\n      isIconButton: {\n        true: \"\",\n        false: \"\",\n      },\n    },\n    compoundVariants: [\n      {\n        isIconButton: true,\n        size: \"xs\",\n        shape: \"default\",\n        className: \"size-6 px-1\",\n      },\n      {\n        isIconButton: true,\n        size: \"sm\",\n        shape: \"default\",\n        className: \"size-8 px-1.5\",\n      },\n      {\n        isIconButton: true,\n        size: \"md\",\n        shape: \"default\",\n        className: \"size-9 px-2\",\n      },\n      {\n        isIconButton: true,\n        size: \"lg\",\n        shape: \"default\",\n        className: \"size-11 px-2.5\",\n      },\n      {\n        isIconButton: true,\n        size: \"xs\",\n        shape: \"circle\",\n        className: \"aspect-square size-6 p-0\",\n      },\n      {\n        isIconButton: true,\n        size: \"sm\",\n        shape: \"circle\",\n        className: \"aspect-square size-8 p-0\",\n      },\n      {\n        isIconButton: true,\n        size: \"md\",\n        shape: \"circle\",\n        className: \"aspect-square size-9 p-0\",\n      },\n      {\n        isIconButton: true,\n        size: \"lg\",\n        shape: \"circle\",\n        className: \"aspect-square size-11 p-0\",\n      },\n      {\n        isIconButton: false,\n        size: \"xs\",\n        className: \"h-7 px-2\",\n      },\n      {\n        isIconButton: false,\n        size: \"sm\",\n        className: \"h-9 px-3\",\n      },\n      {\n        isIconButton: false,\n        size: \"md\",\n        className: \"h-10 px-4\",\n      },\n      {\n        isIconButton: false,\n        size: \"lg\",\n        className: \"h-12 px-5\",\n      },\n    ],\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n      shape: \"default\",\n      isIconButton: false,\n    },\n  }\n);\n\n// Add a custom type for button variants that includes color as any string\nexport type ButtonVariantsProps = VariantProps<typeof buttonVariants> & {\n  class?: string;\n};\n\nexport type CustomButtonSize = \"xs\" | \"sm\" | \"md\" | \"lg\";\nexport type CustomButtonVariant = \"default\" | \"outline\" | \"ghost\" | \"link\";\n\nexport interface CustomButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  size?: CustomButtonSize;\n  variant?: CustomButtonVariant;\n  color?: string;\n  circle?: boolean;\n  icon?: React.ElementType;\n  iconSize?: number;\n  leftIcon?: React.ElementType;\n  rightIcon?: React.ElementType;\n  leftSide?: React.ReactNode;\n  rightSide?: React.ReactNode;\n  loading?: boolean;\n  href?: string;\n  external?: boolean;\n  as?: React.ElementType;\n  tooltip?: React.ReactNode;\n  classNames?: {\n    icon?: string;\n    tooltip?: string;\n  };\n}\n\ntype ColorValue = {\n  bg: string;\n  text: string;\n};\n\ntype ColorMap = {\n  destructive: ColorValue;\n  primary: ColorValue;\n  secondary: ColorValue;\n  [key: string]: ColorValue;\n};\n\nexport const CustomButton: ReactFC<CustomButtonProps> = ({\n  className,\n  variant = \"default\",\n  size = \"md\",\n  circle = false,\n  color = \"foreground\",\n  style,\n  icon: Icon,\n  iconSize,\n  leftIcon: LeftIcon,\n  rightIcon: RightIcon,\n  leftSide,\n  rightSide,\n  loading,\n  children,\n  classNames = {},\n  href,\n  external,\n  disabled = false,\n  as,\n  tooltip,\n  ...props\n}) => {\n  const {\n    Component = as || \"button\",\n    href: linkHref,\n    linkProps,\n  } = useLinkableComponent({ href, external, ...props });\n\n  const colorMap: ColorMap = {\n    destructive: {\n      bg: \"var(--color-destructive)\",\n      text: \"var(--color-destructive-foreground)\",\n    },\n    primary: {\n      bg: \"var(--color-primary)\",\n      text: \"var(--color-primary-foreground)\",\n    },\n    secondary: {\n      bg: \"var(--color-secondary)\",\n      text: \"var(--color-secondary-foreground)\",\n    },\n  };\n\n  const buttonColors = colorMap[color] ?? {\n    bg: `var(--color-${color})`,\n    text: \"var(--color-white)\",\n  };\n\n  //if size is not found in sizeStyles, throw an error\n  if (!sizeStyles[size]) {\n    throw new Error(`Invalid size: ${size}`);\n  }\n\n  const foundSizeStyle = sizeStyles[size] || sizeStyles.md;\n  const defaultIconSize = foundSizeStyle.iconSize ?? defaultIconSizes[size];\n  const finalIconSize = iconSize ?? defaultIconSize;\n  const hasIcon = !!Icon || !!LeftIcon || !!RightIcon;\n  const isIconOnly = circle || (!children && hasIcon);\n\n  const renderIcon = (\n    IconComponent: React.ElementType | undefined,\n    className?: string\n  ) =>\n    IconComponent && (\n      <IconComponent\n        size={finalIconSize}\n        className={cn(classNames.icon, \"shrink-0\", className)}\n      />\n    );\n\n  const buttonContent = loading ? (\n    <>\n      <Spinner size={size} className=\"shrink-0 text-current\" />\n      {!isIconOnly && <span className=\"truncate\">{children}</span>}\n    </>\n  ) : (\n    <>\n      {leftSide || renderIcon(LeftIcon)}\n      {Icon\n        ? renderIcon(Icon)\n        : children && <span className=\"truncate\">{children}</span>}\n      {rightSide || renderIcon(RightIcon)}\n    </>\n  );\n\n  // Setup attributes based on the component type\n  const buttonAttributes: any = {\n    className: buttonVariants({\n      variant,\n      size,\n      shape: circle ? \"circle\" : \"default\",\n      isIconButton: isIconOnly,\n      class: className,\n    }),\n    style: {\n      \"--button-bg\": buttonColors.bg,\n      \"--button-text\": buttonColors.text,\n      ...(circle && {\n        width: `var(--btn-size-${size})`,\n        height: `var(--btn-size-${size})`,\n      }),\n      ...style,\n    } as React.CSSProperties,\n    ...linkProps,\n    ...props,\n  };\n\n  // Add specific attributes based on component type\n  if (Component === \"button\") {\n    buttonAttributes.disabled = disabled || loading;\n  } else if (href) {\n    buttonAttributes.href = href;\n  }\n\n  const button = <Component {...buttonAttributes}>{buttonContent}</Component>;\n\n  return tooltip ? (\n    <ConditionalTooltip\n      content={String(tooltip)}\n      condition={true}\n      classNames={{ tooltip: classNames.tooltip }}\n    >\n      {button}\n    </ConditionalTooltip>\n  ) : (\n    button\n  );\n};\n\nCustomButton.displayName = \"CustomButton\";\n"
    },
    {
      "path": "registry/hooks/useLinkableComponent.ts",
      "type": "registry:hook",
      "content": "import Link from \"next/link\";\n\nexport interface LinkableProps {\n  href?: string;\n  external?: boolean;\n  target?: string;\n  rel?: string;\n}\n\nexport function useLinkableComponent<T extends LinkableProps>(props: T) {\n  const { href, external, ...rest } = props;\n\n  const linkProps = {\n    ...rest,\n    ...(external && {\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n    }),\n  };\n\n  const Component = href ? (external ? \"a\" : Link) : undefined;\n\n  return {\n    Component,\n    href,\n    linkProps,\n  };\n}\n"
    }
  ]
}