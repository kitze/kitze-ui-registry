{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "custom-button",
  "type": "registry:component",
  "title": "Custom Button",
  "description": "A customizable button component with various styles, sizes, and features like loading state and icon support",
  "dependencies": [
    "class-variance-authority"
  ],
  "registryDependencies": [
    "https://ui.kitze.io/r/conditional-tooltip.json",
    "https://ui.kitze.io/r/spinner.json"
  ],
  "files": [
    {
      "path": "registry/new-york/custom-button/CustomButton.tsx",
      "type": "registry:component",
      "content": "import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { ReactFC } from \"@/lib/types\";\nimport { useLinkableComponent } from \"@/hooks/useLinkableComponent\";\nimport { ConditionalTooltip } from \"@/registry/new-york/conditional-tooltip/ConditionalTooltip\";\nimport { Spinner } from \"@/registry/new-york/spinner/Spinner\";\nimport { CustomButtonProps } from \"./CustomButton.types\";\nimport { buttonVariants } from \"./CustomButton.variants\";\nimport { sizeStyles, defaultIconSizes } from \"./CustomButton.config\";\n\ntype ColorValue = {\n  bg: string;\n  text: string;\n};\n\ntype ColorMap = {\n  destructive: ColorValue;\n  primary: ColorValue;\n  secondary: ColorValue;\n  [key: string]: ColorValue;\n};\n\nexport const CustomButton: ReactFC<CustomButtonProps> = ({\n  className,\n  variant = \"default\",\n  size = \"md\",\n  circle,\n  color = \"foreground\",\n  style,\n  icon: Icon,\n  iconSize,\n  leftIcon: LeftIcon,\n  rightIcon: RightIcon,\n  leftSide,\n  rightSide,\n  loading,\n  children,\n  classNames = {},\n  href,\n  external,\n  disabled = false,\n  as,\n  tooltip,\n  ...props\n}) => {\n  const {\n    Component = as || \"button\",\n    href: linkHref,\n    linkProps,\n  } = useLinkableComponent({ href, external, ...props });\n\n  const colorMap: ColorMap = {\n    destructive: {\n      bg: \"var(--color-destructive)\",\n      text: \"var(--color-destructive-foreground)\",\n    },\n    primary: {\n      bg: \"var(--color-primary)\",\n      text: \"var(--color-primary-foreground)\",\n    },\n    secondary: {\n      bg: \"var(--color-secondary)\",\n      text: \"var(--color-secondary-foreground)\",\n    },\n  };\n\n  const buttonColors = colorMap[color] ?? {\n    bg: `var(--color-${color})`,\n    text: \"var(--color-white)\",\n  };\n\n  //if size is not found in sizeStyles, throw an error\n  if (!sizeStyles[size]) {\n    throw new Error(`Invalid size: ${size}`);\n  }\n\n  const foundSizeStyle = sizeStyles[size] || sizeStyles.md;\n  const { padding, gap } = foundSizeStyle;\n  const defaultIconSize = foundSizeStyle.iconSize ?? defaultIconSizes[size];\n  const finalIconSize = iconSize ?? defaultIconSize;\n  const isIconOnly = circle || (!children && !!Icon);\n\n  const renderIcon = (\n    IconComponent: React.ElementType | undefined,\n    className?: string\n  ) =>\n    IconComponent && (\n      <IconComponent\n        size={finalIconSize}\n        className={cn(classNames.icon, \"shrink-0\", className)}\n      />\n    );\n\n  const buttonContent = loading ? (\n    <>\n      <Spinner size={size} className=\"shrink-0 text-current\" />\n      {!isIconOnly && <span className=\"truncate\">{children}</span>}\n    </>\n  ) : (\n    <>\n      {leftSide || renderIcon(LeftIcon)}\n      {Icon\n        ? renderIcon(Icon)\n        : children && <span className=\"truncate\">{children}</span>}\n      {rightSide || renderIcon(RightIcon)}\n    </>\n  );\n\n  // Setup attributes based on the component type\n  const buttonAttributes: any = {\n    className: buttonVariants({\n      variant,\n      size,\n      shape: circle ? \"circle\" : \"default\",\n      isIconButton: isIconOnly,\n      class: cn(className, !circle && !isIconOnly && padding, gap),\n    }),\n    style: {\n      \"--button-bg\": buttonColors.bg,\n      \"--button-text\": buttonColors.text,\n      ...style,\n    } as React.CSSProperties,\n    ...linkProps,\n    ...props,\n  };\n\n  // Add specific attributes based on component type\n  if (Component === \"button\") {\n    buttonAttributes.disabled = disabled || loading;\n  } else if (href) {\n    buttonAttributes.href = href;\n  }\n\n  const button = <Component {...buttonAttributes}>{buttonContent}</Component>;\n\n  return tooltip ? (\n    <ConditionalTooltip\n      content={String(tooltip)}\n      condition={true}\n      classNames={{ tooltip: classNames.tooltip }}\n    >\n      {button}\n    </ConditionalTooltip>\n  ) : (\n    button\n  );\n};\n\nCustomButton.displayName = \"CustomButton\";\n"
    }
  ]
}