{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "simple-dropdown-menu",
  "type": "registry:component",
  "title": "Simple Dropdown Menu",
  "description": "A simplified dropdown menu component with click triggering and common components, including a responsive version for mobile",
  "registryDependencies": [
    "dropdown-menu",
    "https://ui.kitze.io/r/simple-tooltip.json",
    "https://ui.kitze.io/r/bottom-drawer.json",
    "https://ui.kitze.io/r/kitze-ui-context.json",
    "https://ui.kitze.io/r/menu-context.json",
    "https://ui.kitze.io/r/ui-alert.json"
  ],
  "files": [
    {
      "path": "registry/new-york/simple-dropdown-menu/SimpleDropdownMenu.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { MenuProvider } from \"@/registry/new-york/menu-context/MenuContext\";\nimport { useControlledOpen } from \"@/registry/hooks/useControlledOpen\";\n\nexport interface SimpleDropdownMenuClassNames {\n  content?: string;\n}\n\nexport interface SimpleDropdownMenuProps {\n  children: React.ReactNode;\n  content: React.ReactNode;\n  classNames?: SimpleDropdownMenuClassNames;\n  align?: \"start\" | \"center\" | \"end\";\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\";\n  closeOnClick?: boolean;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\nexport const SimpleDropdownMenu: ReactFC<SimpleDropdownMenuProps> = ({\n  children,\n  content,\n  classNames = {},\n  align = \"center\",\n  side = \"bottom\",\n  closeOnClick = true,\n  open,\n  onOpenChange,\n}) => {\n  const { isOpen, setIsOpen, close } = useControlledOpen({\n    open,\n    onOpenChange,\n  });\n\n  // Function to close the menu when clicking on menu items\n  const closeMenu = () => {\n    if (closeOnClick) {\n      close();\n    }\n  };\n\n  return (\n    <MenuProvider menuType=\"dropdown\" closeMenu={closeMenu}>\n      <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n        <DropdownMenuTrigger asChild>{children}</DropdownMenuTrigger>\n        <DropdownMenuContent\n          className={classNames.content}\n          align={align}\n          side={side}\n        >\n          {content}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </MenuProvider>\n  );\n};\n"
    },
    {
      "path": "registry/new-york/simple-dropdown-menu/ResponsiveDropdownMenu.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport {\n  SimpleDropdownMenu,\n  SimpleDropdownMenuProps,\n} from \"./SimpleDropdownMenu\";\nimport { BottomDrawerMenu } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenu\";\nimport { useKitzeUI } from \"@/registry/new-york/kitze-ui-context/KitzeUIContext\";\nimport { useControlledOpen } from \"@/registry/hooks/useControlledOpen\";\n\nexport interface ResponsiveDropdownMenuProps extends SimpleDropdownMenuProps {\n  drawerTitle?: string;\n  closeOnClick?: boolean;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\nexport const ResponsiveDropdownMenu: ReactFC<ResponsiveDropdownMenuProps> = ({\n  children,\n  content,\n  drawerTitle,\n  closeOnClick = true,\n  open,\n  onOpenChange,\n  classNames = {},\n  align = \"center\",\n  side = \"bottom\",\n}) => {\n  const { isMobile } = useKitzeUI();\n  const { isOpen, setIsOpen } = useControlledOpen({\n    open,\n    onOpenChange,\n  });\n\n  // On mobile, render content in a bottom drawer\n  if (isMobile) {\n    return (\n      <>\n        <div onClick={() => setIsOpen(true)}>{children}</div>\n        <BottomDrawerMenu\n          open={isOpen}\n          onOpenChange={setIsOpen}\n          title={drawerTitle}\n          closeOnClick={closeOnClick}\n          content={content}\n        >\n          {null}\n        </BottomDrawerMenu>\n      </>\n    );\n  }\n\n  // On desktop, render regular dropdown\n  return (\n    <SimpleDropdownMenu\n      content={content}\n      classNames={classNames}\n      align={align}\n      side={side}\n    >\n      {children}\n    </SimpleDropdownMenu>\n  );\n};\n"
    },
    {
      "path": "registry/new-york/simple-dropdown-menu/CommonMenuItem.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport { DropdownMenuItem } from \"@/components/ui/dropdown-menu\";\nimport { ContextMenuItem } from \"@/components/ui/context-menu\";\nimport { DropdownMenuShortcut } from \"@/components/ui/dropdown-menu\";\nimport { ContextMenuShortcut } from \"@/components/ui/context-menu\";\nimport {\n  useLinkableComponent,\n  LinkableProps,\n} from \"@/registry/hooks/useLinkableComponent\";\nimport { cn } from \"@/lib/utils\";\nimport { LucideIcon } from \"lucide-react\";\nimport { useMenuContext } from \"@/registry/new-york/menu-context/MenuContext\";\nimport { BottomDrawerMenuItem } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenuItem\";\nimport { HelpInfoCircle } from \"@/registry/new-york/help-info-circle/HelpInfoCircle\";\n\nexport interface CommonMenuItemProps extends LinkableProps {\n  children: React.ReactNode;\n  shortcut?: string;\n  hint?: string;\n  leftIcon?: LucideIcon;\n  rightIcon?: LucideIcon;\n  emoji?: string;\n  className?: string;\n  disabled?: boolean;\n  destructive?: boolean;\n  onSelect?: () => void;\n  isLast?: boolean;\n}\n\nexport const CommonMenuItem: ReactFC<CommonMenuItemProps> = ({\n  children,\n  shortcut,\n  hint,\n  leftIcon,\n  rightIcon,\n  emoji,\n  className,\n  disabled,\n  destructive,\n  onSelect,\n  isLast,\n  ...rest\n}) => {\n  const { menuType, closeMenu } = useMenuContext();\n\n  // Handle click with menu closing\n  const handleClick = () => {\n    console.log(\"clicking!\");\n    alert(\"clicking!\");\n    onSelect?.();\n    closeMenu?.();\n  };\n\n  // If we're in a bottom drawer, render the BottomDrawerMenuItem\n  if (menuType === \"bottom-drawer\") {\n    return (\n      <BottomDrawerMenuItem\n        leftIcon={leftIcon}\n        rightIcon={rightIcon}\n        emoji={emoji}\n        className={className}\n        disabled={disabled}\n        destructive={destructive}\n        onClick={handleClick}\n        href={rest.href}\n        external={rest.external}\n        isLast={isLast}\n        hint={hint}\n      >\n        {children}\n      </BottomDrawerMenuItem>\n    );\n  }\n\n  // For dropdown and context menus, use the existing implementation\n  const { Component, href, linkProps } = useLinkableComponent(rest);\n\n  const MenuItem = menuType === \"dropdown\" ? DropdownMenuItem : ContextMenuItem;\n  const MenuShortcut =\n    menuType === \"dropdown\" ? DropdownMenuShortcut : ContextMenuShortcut;\n\n  const iconClasses = cn(\n    \"h-4 w-4\",\n    \"text-muted-foreground\",\n    destructive && \"text-destructive\"\n  );\n\n  // We'll still keep the class for backward compatibility\n  const itemClasses = cn(className, destructive && \"text-destructive\");\n\n  const content = (\n    <>\n      {emoji ? (\n        <span className=\"mr-2 text-base\">{emoji}</span>\n      ) : leftIcon ? (\n        React.createElement(leftIcon, { className: cn(\"mr-2\", iconClasses) })\n      ) : null}\n      <span>{children}</span>\n      {hint && (\n        <span className=\"ml-2\">\n          <HelpInfoCircle\n            content={hint}\n            iconClassName={cn(\"h-3.5 w-3.5\", destructive && \"text-destructive\")}\n            isMobile={false}\n          />\n        </span>\n      )}\n      {rightIcon &&\n        React.createElement(rightIcon, {\n          className: cn(\"ml-auto\", iconClasses),\n        })}\n      {shortcut && <MenuShortcut>{shortcut}</MenuShortcut>}\n    </>\n  );\n\n  // With link\n  if (href && Component !== \"div\") {\n    return (\n      <MenuItem\n        className={itemClasses}\n        disabled={disabled}\n        onSelect={handleClick}\n        asChild\n        variant={destructive ? \"destructive\" : \"default\"}\n      >\n        <Component href={href} {...linkProps}>\n          {content}\n        </Component>\n      </MenuItem>\n    );\n  }\n\n  // Without link\n  return (\n    <MenuItem\n      className={itemClasses}\n      disabled={disabled}\n      onSelect={handleClick}\n      variant={destructive ? \"destructive\" : \"default\"}\n    >\n      {content}\n    </MenuItem>\n  );\n};\n"
    },
    {
      "path": "registry/new-york/simple-dropdown-menu/CommonMenuItemEdit.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport { CommonMenuItem, CommonMenuItemProps } from \"./CommonMenuItem\";\nimport { Edit } from \"lucide-react\";\n\nexport interface CommonMenuItemEditProps\n  extends Omit<CommonMenuItemProps, \"children\" | \"leftIcon\"> {\n  label?: string;\n}\n\nexport const CommonMenuItemEdit: ReactFC<CommonMenuItemEditProps> = ({\n  label = \"Edit\",\n  ...props\n}) => {\n  return (\n    <CommonMenuItem leftIcon={Edit} {...props}>\n      {label}\n    </CommonMenuItem>\n  );\n};\n"
    },
    {
      "path": "registry/new-york/simple-dropdown-menu/CommonMenuItemDelete.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport { CommonMenuItem, CommonMenuItemProps } from \"./CommonMenuItem\";\nimport { Trash } from \"lucide-react\";\nimport { useConfirmAlertDelete } from \"@/registry/new-york/ui-alert/AlertContext\";\n\nexport interface CommonMenuItemDeleteProps\n  extends Omit<\n    CommonMenuItemProps,\n    \"children\" | \"leftIcon\" | \"destructive\" | \"onSelect\"\n  > {\n  label?: string;\n  itemName?: string;\n  onDelete?: () => void;\n}\n\nexport const CommonMenuItemDelete: ReactFC<CommonMenuItemDeleteProps> = ({\n  label = \"Delete\",\n  itemName = \"item\",\n  onDelete,\n  ...props\n}) => {\n  const confirmDelete = useConfirmAlertDelete();\n\n  const handleDelete = () => {\n    confirmDelete({\n      title: `Delete ${itemName}`,\n      description: `Are you sure you want to delete this ${itemName}? This action cannot be undone.`,\n      onConfirm: () => {\n        onDelete?.();\n      },\n    });\n  };\n\n  return (\n    <CommonMenuItem\n      leftIcon={Trash}\n      destructive\n      onSelect={handleDelete}\n      {...props}\n    >\n      {label}\n    </CommonMenuItem>\n  );\n};\n"
    },
    {
      "path": "registry/new-york/simple-dropdown-menu/CommonMenuLabel.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport { DropdownMenuLabel } from \"@/components/ui/dropdown-menu\";\nimport { ContextMenuLabel } from \"@/components/ui/context-menu\";\nimport { useMenuContext } from \"@/registry/new-york/menu-context/MenuContext\";\nimport { cn } from \"@/lib/utils\";\nimport { BottomDrawerMenuLabel } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenuComponents\";\n\nexport interface CommonMenuLabelProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const CommonMenuLabel: ReactFC<CommonMenuLabelProps> = ({\n  children,\n  className,\n}) => {\n  const { menuType } = useMenuContext();\n\n  // If bottom drawer, use BottomDrawerMenuLabel\n  if (menuType === \"bottom-drawer\") {\n    return (\n      <BottomDrawerMenuLabel className={className}>\n        {children}\n      </BottomDrawerMenuLabel>\n    );\n  }\n\n  // Otherwise use dropdown or context menu label\n  const MenuLabel =\n    menuType === \"dropdown\" ? DropdownMenuLabel : ContextMenuLabel;\n\n  return <MenuLabel className={cn(className)}>{children}</MenuLabel>;\n};\n"
    },
    {
      "path": "registry/new-york/simple-dropdown-menu/CommonMenuSeparator.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport { DropdownMenuSeparator } from \"@/components/ui/dropdown-menu\";\nimport { ContextMenuSeparator } from \"@/components/ui/context-menu\";\nimport { useMenuContext } from \"@/registry/new-york/menu-context/MenuContext\";\nimport { cn } from \"@/lib/utils\";\nimport { BottomDrawerMenuSeparator } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenuComponents\";\n\nexport interface CommonMenuSeparatorProps {\n  className?: string;\n}\n\nexport const CommonMenuSeparator: ReactFC<CommonMenuSeparatorProps> = ({\n  className,\n}) => {\n  const { menuType } = useMenuContext();\n\n  // If bottom drawer, use BottomDrawerMenuSeparator\n  if (menuType === \"bottom-drawer\") {\n    return <BottomDrawerMenuSeparator className={className} />;\n  }\n\n  // Otherwise use dropdown or context menu separator\n  const MenuSeparator =\n    menuType === \"dropdown\" ? DropdownMenuSeparator : ContextMenuSeparator;\n\n  return <MenuSeparator className={cn(className)} />;\n};\n"
    },
    {
      "path": "registry/new-york/simple-dropdown-menu/CommonMenuGroup.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport { DropdownMenuGroup } from \"@/components/ui/dropdown-menu\";\nimport { ContextMenuGroup } from \"@/components/ui/context-menu\";\nimport { useMenuContext } from \"@/registry/new-york/menu-context/MenuContext\";\nimport { BottomDrawerMenuGroup } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenuComponents\";\n\nexport interface CommonMenuGroupProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const CommonMenuGroup: ReactFC<CommonMenuGroupProps> = ({\n  children,\n  className,\n}) => {\n  const { menuType } = useMenuContext();\n\n  // If bottom drawer, use BottomDrawerMenuGroup\n  if (menuType === \"bottom-drawer\") {\n    return (\n      <BottomDrawerMenuGroup className={className}>\n        {children}\n      </BottomDrawerMenuGroup>\n    );\n  }\n\n  // Otherwise use dropdown or context menu group\n  const MenuGroup =\n    menuType === \"dropdown\" ? DropdownMenuGroup : ContextMenuGroup;\n\n  return <MenuGroup className={className}>{children}</MenuGroup>;\n};\n"
    }
  ]
}