{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "simple-dropdown-menu",
  "type": "registry:component",
  "title": "Simple Dropdown Menu",
  "description": "A simplified dropdown menu component with click triggering and common components, including a responsive version for mobile",
  "dependencies": [],
  "registryDependencies": [
    "https://ui.kitze.io/r/simple-tooltip.json",
    "https://ui.kitze.io/r/bottom-drawer.json",
    "https://ui.kitze.io/r/kitze-ui-context.json"
  ],
  "files": [
    {
      "path": "registry/new-york/simple-dropdown-menu/SimpleDropdownMenu.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { MenuProvider } from \"@/registry/new-york/KitzeUIContext/MenuContext\";\nimport { useControlledOpen } from \"@/registry/hooks/useControlledOpen\";\n\nexport interface SimpleDropdownMenuClassNames {\n  content?: string;\n}\n\nexport interface SimpleDropdownMenuProps {\n  children: React.ReactNode;\n  content: React.ReactNode;\n  classNames?: SimpleDropdownMenuClassNames;\n  align?: \"start\" | \"center\" | \"end\";\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\";\n  closeOnClick?: boolean;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\nexport const SimpleDropdownMenu: ReactFC<SimpleDropdownMenuProps> = ({\n  children,\n  content,\n  classNames = {},\n  align = \"center\",\n  side = \"bottom\",\n  closeOnClick = true,\n  open,\n  onOpenChange,\n}) => {\n  const { isOpen, setIsOpen, close } = useControlledOpen({\n    open,\n    onOpenChange,\n  });\n\n  // Function to close the menu when clicking on menu items\n  const closeMenu = () => {\n    if (closeOnClick) {\n      close();\n    }\n  };\n\n  return (\n    <MenuProvider menuType=\"dropdown\" closeMenu={closeMenu}>\n      <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n        <DropdownMenuTrigger asChild>{children}</DropdownMenuTrigger>\n        <DropdownMenuContent\n          className={classNames.content}\n          align={align}\n          side={side}\n        >\n          {content}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </MenuProvider>\n  );\n};\n"
    },
    {
      "path": "registry/new-york/simple-dropdown-menu/ResponsiveDropdownMenu.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport {\n  SimpleDropdownMenu,\n  SimpleDropdownMenuProps,\n} from \"./SimpleDropdownMenu\";\nimport { BottomDrawer } from \"@/registry/new-york/bottom-drawer/BottomDrawer\";\nimport { MenuProvider } from \"@/registry/new-york/KitzeUIContext/MenuContext\";\nimport { useKitzeUI } from \"@/registry/new-york/KitzeUIContext/KitzeUIContext\";\nimport { useControlledOpen } from \"@/registry/hooks/useControlledOpen\";\n\nexport interface ResponsiveDropdownMenuProps extends SimpleDropdownMenuProps {\n  drawerTitle?: string;\n  closeOnClick?: boolean;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\nexport const ResponsiveDropdownMenu: ReactFC<ResponsiveDropdownMenuProps> = ({\n  children,\n  content,\n  drawerTitle,\n  closeOnClick = true,\n  open,\n  onOpenChange,\n  classNames = {},\n  align = \"center\",\n  side = \"bottom\",\n}) => {\n  const { isMobile } = useKitzeUI();\n  const { isOpen, setIsOpen, close } = useControlledOpen({\n    open,\n    onOpenChange,\n  });\n\n  // Function to close the menu when clicking on menu items\n  const closeMenu = () => {\n    if (closeOnClick) {\n      close();\n    }\n  };\n\n  // On mobile, render content in a bottom drawer\n  if (isMobile) {\n    return (\n      <>\n        <div onClick={() => setIsOpen(true)}>{children}</div>\n        <BottomDrawer\n          open={isOpen}\n          onOpenChange={setIsOpen}\n          title={drawerTitle}\n          trigger={null}\n        >\n          <MenuProvider menuType=\"bottom-drawer\" closeMenu={closeMenu}>\n            <div className=\"flex flex-col\">{content}</div>\n          </MenuProvider>\n        </BottomDrawer>\n      </>\n    );\n  }\n\n  // On desktop, render regular dropdown\n  return (\n    <SimpleDropdownMenu\n      content={content}\n      classNames={classNames}\n      align={align}\n      side={side}\n    >\n      {children}\n    </SimpleDropdownMenu>\n  );\n};\n"
    },
    {
      "path": "registry/new-york/simple-dropdown-menu/CommonMenuItem.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport { DropdownMenuItem } from \"@/components/ui/dropdown-menu\";\nimport { ContextMenuItem } from \"@/components/ui/context-menu\";\nimport { DropdownMenuShortcut } from \"@/components/ui/dropdown-menu\";\nimport { ContextMenuShortcut } from \"@/components/ui/context-menu\";\nimport {\n  useLinkableComponent,\n  LinkableProps,\n} from \"@/registry/hooks/useLinkableComponent\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { HelpCircle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { LucideIcon } from \"lucide-react\";\nimport { useMenuContext } from \"@/registry/new-york/KitzeUIContext/MenuContext\";\nimport { BottomDrawerMenuItem } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenuItem\";\nimport { HelpInfoCircle } from \"@/registry/new-york/KitzeUIContext/HelpInfoCircle\";\n\nexport interface CommonMenuItemProps extends LinkableProps {\n  children: React.ReactNode;\n  shortcut?: string;\n  hint?: string;\n  leftIcon?: LucideIcon;\n  rightIcon?: LucideIcon;\n  className?: string;\n  disabled?: boolean;\n  destructive?: boolean;\n  onSelect?: () => void;\n  isLast?: boolean;\n}\n\nexport const CommonMenuItem: ReactFC<CommonMenuItemProps> = ({\n  children,\n  shortcut,\n  hint,\n  leftIcon,\n  rightIcon,\n  className,\n  disabled,\n  destructive,\n  onSelect,\n  isLast,\n  ...rest\n}) => {\n  const { menuType, closeMenu } = useMenuContext();\n\n  // Handle click with menu closing\n  const handleClick = () => {\n    if (onSelect) {\n      onSelect();\n    }\n\n    // Close the menu if closeMenu function is provided\n    if (closeMenu) {\n      closeMenu();\n    }\n  };\n\n  // If we're in a bottom drawer, render the BottomDrawerMenuItem\n  if (menuType === \"bottom-drawer\") {\n    return (\n      <BottomDrawerMenuItem\n        leftIcon={leftIcon}\n        rightIcon={rightIcon}\n        className={className}\n        disabled={disabled}\n        destructive={destructive}\n        onClick={handleClick}\n        href={rest.href}\n        external={rest.external}\n        isLast={isLast}\n        hint={hint}\n      >\n        {children}\n      </BottomDrawerMenuItem>\n    );\n  }\n\n  // For dropdown and context menus, use the existing implementation\n  const { Component, href, linkProps } = useLinkableComponent(rest);\n\n  const MenuItem = menuType === \"dropdown\" ? DropdownMenuItem : ContextMenuItem;\n  const MenuShortcut =\n    menuType === \"dropdown\" ? DropdownMenuShortcut : ContextMenuShortcut;\n\n  const iconClasses = cn(\n    \"h-4 w-4\",\n    \"text-muted-foreground\",\n    destructive && \"text-destructive\"\n  );\n\n  const itemClasses = cn(className, destructive && \"text-destructive\");\n\n  const content = (\n    <>\n      {leftIcon &&\n        React.createElement(leftIcon, { className: cn(\"mr-2\", iconClasses) })}\n      <span>{children}</span>\n      {hint && (\n        <span className=\"ml-2\">\n          <HelpInfoCircle\n            content={hint}\n            iconClassName={cn(\"h-3.5 w-3.5\", destructive && \"text-destructive\")}\n            isMobile={false}\n          />\n        </span>\n      )}\n      {rightIcon &&\n        React.createElement(rightIcon, {\n          className: cn(\"ml-auto\", iconClasses),\n        })}\n      {shortcut && <MenuShortcut>{shortcut}</MenuShortcut>}\n    </>\n  );\n\n  // With link\n  if (href && Component !== \"div\") {\n    return (\n      <MenuItem\n        className={itemClasses}\n        disabled={disabled}\n        onSelect={handleClick}\n        asChild\n      >\n        <Component href={href} {...linkProps}>\n          {content}\n        </Component>\n      </MenuItem>\n    );\n  }\n\n  // Without link\n  return (\n    <MenuItem\n      className={itemClasses}\n      disabled={disabled}\n      onSelect={handleClick}\n    >\n      {content}\n    </MenuItem>\n  );\n};\n"
    },
    {
      "path": "registry/new-york/simple-dropdown-menu/CommonMenuLabel.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport { DropdownMenuLabel } from \"@/components/ui/dropdown-menu\";\nimport { ContextMenuLabel } from \"@/components/ui/context-menu\";\nimport { useMenuContext } from \"@/registry/new-york/KitzeUIContext/MenuContext\";\nimport { cn } from \"@/lib/utils\";\nimport { BottomDrawerMenuLabel } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenuComponents\";\n\nexport interface CommonMenuLabelProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const CommonMenuLabel: ReactFC<CommonMenuLabelProps> = ({\n  children,\n  className,\n}) => {\n  const { menuType } = useMenuContext();\n\n  // If bottom drawer, use BottomDrawerMenuLabel\n  if (menuType === \"bottom-drawer\") {\n    return (\n      <BottomDrawerMenuLabel className={className}>\n        {children}\n      </BottomDrawerMenuLabel>\n    );\n  }\n\n  // Otherwise use dropdown or context menu label\n  const MenuLabel =\n    menuType === \"dropdown\" ? DropdownMenuLabel : ContextMenuLabel;\n\n  return <MenuLabel className={cn(className)}>{children}</MenuLabel>;\n};\n"
    },
    {
      "path": "registry/new-york/simple-dropdown-menu/CommonMenuSeparator.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport { DropdownMenuSeparator } from \"@/components/ui/dropdown-menu\";\nimport { ContextMenuSeparator } from \"@/components/ui/context-menu\";\nimport { useMenuContext } from \"@/registry/new-york/KitzeUIContext/MenuContext\";\nimport { cn } from \"@/lib/utils\";\nimport { BottomDrawerMenuSeparator } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenuComponents\";\n\nexport interface CommonMenuSeparatorProps {\n  className?: string;\n}\n\nexport const CommonMenuSeparator: ReactFC<CommonMenuSeparatorProps> = ({\n  className,\n}) => {\n  const { menuType } = useMenuContext();\n\n  // If bottom drawer, use BottomDrawerMenuSeparator\n  if (menuType === \"bottom-drawer\") {\n    return <BottomDrawerMenuSeparator className={className} />;\n  }\n\n  // Otherwise use dropdown or context menu separator\n  const MenuSeparator =\n    menuType === \"dropdown\" ? DropdownMenuSeparator : ContextMenuSeparator;\n\n  return <MenuSeparator className={cn(className)} />;\n};\n"
    },
    {
      "path": "registry/new-york/simple-dropdown-menu/CommonMenuGroup.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC } from \"@/lib/utils\";\nimport { DropdownMenuGroup } from \"@/components/ui/dropdown-menu\";\nimport { ContextMenuGroup } from \"@/components/ui/context-menu\";\nimport { useMenuContext } from \"@/registry/new-york/KitzeUIContext/MenuContext\";\nimport { BottomDrawerMenuGroup } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenuComponents\";\n\nexport interface CommonMenuGroupProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const CommonMenuGroup: ReactFC<CommonMenuGroupProps> = ({\n  children,\n  className,\n}) => {\n  const { menuType } = useMenuContext();\n\n  // If bottom drawer, use BottomDrawerMenuGroup\n  if (menuType === \"bottom-drawer\") {\n    return (\n      <BottomDrawerMenuGroup className={className}>\n        {children}\n      </BottomDrawerMenuGroup>\n    );\n  }\n\n  // Otherwise use dropdown or context menu group\n  const MenuGroup =\n    menuType === \"dropdown\" ? DropdownMenuGroup : ContextMenuGroup;\n\n  return <MenuGroup className={className}>{children}</MenuGroup>;\n};\n"
    },
    {
      "path": "registry/new-york/bottom-drawer/BottomDrawerMenuItem.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC, cn } from \"@/lib/utils\";\nimport { LucideIcon } from \"lucide-react\";\nimport { HelpInfoCircle } from \"@/registry/new-york/KitzeUIContext/HelpInfoCircle\";\n\nexport interface BottomDrawerMenuItemProps {\n  children: React.ReactNode;\n  leftIcon?: LucideIcon;\n  rightIcon?: LucideIcon;\n  className?: string;\n  disabled?: boolean;\n  destructive?: boolean;\n  onClick?: () => void;\n  href?: string;\n  external?: boolean;\n  isLast?: boolean;\n  shortcut?: string;\n  hint?: string;\n}\n\nexport const BottomDrawerMenuItem: ReactFC<BottomDrawerMenuItemProps> = ({\n  children,\n  leftIcon: LeftIcon,\n  rightIcon: RightIcon,\n  className,\n  disabled,\n  destructive,\n  onClick,\n  href,\n  external,\n  isLast,\n  shortcut,\n  hint,\n}) => {\n  const Component = href ? (external ? \"a\" : \"a\") : \"button\";\n  const linkProps = href\n    ? {\n        href,\n        ...(external && {\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n        }),\n      }\n    : {};\n\n  const iconClasses = cn(\n    \"h-5 w-5\",\n    \"text-muted-foreground\",\n    destructive && \"text-destructive\"\n  );\n\n  const itemClasses = cn(\n    \"flex items-center w-full px-4 py-3 text-base\",\n    !isLast && \"border-b border-zinc-100 dark:border-zinc-800\",\n    \"transition-colors active:bg-zinc-50 dark:active:bg-zinc-800/50\",\n    \"text-left justify-start\",\n    disabled && \"opacity-50 pointer-events-none\",\n    destructive && \"text-destructive\",\n    className\n  );\n\n  return (\n    <Component\n      className={itemClasses}\n      onClick={onClick}\n      disabled={disabled && Component === \"button\"}\n      {...linkProps}\n    >\n      {LeftIcon && (\n        <LeftIcon className={cn(\"mr-3 flex-shrink-0\", iconClasses)} />\n      )}\n      <span className=\"flex-1\">{children}</span>\n      {hint && (\n        <div className=\"ml-2 flex-shrink-0\">\n          <HelpInfoCircle\n            content={hint}\n            drawerTitle=\"Help\"\n            iconClassName={destructive ? \"text-destructive\" : \"\"}\n            isMobile={true}\n          />\n        </div>\n      )}\n      {RightIcon && (\n        <RightIcon className={cn(\"ml-auto flex-shrink-0\", iconClasses)} />\n      )}\n    </Component>\n  );\n};\n"
    },
    {
      "path": "registry/new-york/bottom-drawer/BottomDrawerMenuComponents.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { ReactFC, cn } from \"@/lib/utils\";\n\n// Label\nexport interface BottomDrawerMenuLabelProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const BottomDrawerMenuLabel: ReactFC<BottomDrawerMenuLabelProps> = ({\n  children,\n  className,\n}) => {\n  return (\n    <div\n      className={cn(\n        \"px-4 py-2 text-sm font-medium text-zinc-500 dark:text-zinc-400 text-left\",\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\n// Separator\nexport interface BottomDrawerMenuSeparatorProps {\n  className?: string;\n}\n\nexport const BottomDrawerMenuSeparator: ReactFC<\n  BottomDrawerMenuSeparatorProps\n> = ({ className }) => {\n  return (\n    <div\n      className={cn(\n        \"h-[1px] my-1 bg-zinc-100 dark:bg-zinc-800 w-full\",\n        className\n      )}\n    />\n  );\n};\n\n// Group\nexport interface BottomDrawerMenuGroupProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const BottomDrawerMenuGroup: ReactFC<BottomDrawerMenuGroupProps> = ({\n  children,\n  className,\n}) => {\n  return (\n    <div className={cn(\"flex flex-col w-full\", className)}>{children}</div>\n  );\n};\n"
    },
    {
      "path": "registry/hooks/useLinkableComponent.ts",
      "type": "registry:hook",
      "content": "import Link from \"next/link\";\n\nexport interface LinkableProps {\n  href?: string;\n  external?: boolean;\n  target?: string;\n  rel?: string;\n}\n\nexport function useLinkableComponent<T extends LinkableProps>(props: T) {\n  const { href, external, ...rest } = props;\n\n  const linkProps = {\n    ...rest,\n    ...(external && {\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n    }),\n  };\n\n  const Component = href ? (external ? \"a\" : Link) : \"div\";\n\n  return {\n    Component,\n    href,\n    linkProps,\n  };\n}\n"
    },
    {
      "path": "registry/new-york/KitzeUIContext/MenuContext.tsx",
      "type": "registry:component",
      "content": "import React, { createContext, useContext } from \"react\";\n\ntype MenuType = \"dropdown\" | \"context\" | \"bottom-drawer\";\n\ninterface MenuContextValue {\n  menuType: MenuType;\n  closeMenu?: () => void;\n}\n\nconst MenuContext = createContext<MenuContextValue | undefined>(undefined);\n\nexport const MenuProvider = ({\n  children,\n  menuType,\n  closeMenu,\n}: {\n  children: React.ReactNode;\n  menuType: MenuType;\n  closeMenu?: () => void;\n}) => {\n  return (\n    <MenuContext.Provider value={{ menuType, closeMenu }}>\n      {children}\n    </MenuContext.Provider>\n  );\n};\n\nexport const useMenuContext = (): MenuContextValue => {\n  const context = useContext(MenuContext);\n  if (!context) {\n    throw new Error(\"Menu components must be used within a MenuProvider\");\n  }\n  return context;\n};\n"
    }
  ]
}
