{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "responsive-dialog",
  "type": "registry:component",
  "title": "Responsive Dialog",
  "description": "This dialog will display as a drawer on mobile devices and a regular dialog on desktop. Try resizing your browser to see the different appearances.",
  "registryDependencies": [
    "dialog",
    "https://ui.kitze.io/r/bottom-drawer.json",
    "https://ui.kitze.io/r/simple-dialog.json",
    "https://ui.kitze.io/r/kitze-ui-context.json"
  ],
  "dependencies": [
    "next",
    "react",
    "react-dom",
    "tailwindcss",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-dialog",
    "vaul"
  ],
  "files": [
    {
      "path": "registry/new-york/responsive-dialog/ResponsiveDialog.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  SimpleDialog,\n  SimpleDialogProps,\n} from \"@/registry/new-york/simple-dialog/SimpleDialog\";\nimport {\n  BottomDrawer,\n  BottomDrawerProps,\n} from \"@/registry/new-york/bottom-drawer/BottomDrawer\";\nimport { useKitzeUI } from \"@/registry/new-york/kitze-ui-context/KitzeUIContext\";\nimport { useControlledOpen } from \"@/registry/hooks/useControlledOpen\";\nimport { CustomButton } from \"../custom-button/CustomButton\";\n\nexport interface ResponsiveDialogProps\n  extends Pick<SimpleDialogProps, \"size\" | \"classNames\"> {\n  trigger?: React.ReactNode;\n  title?: string;\n  children: React.ReactNode;\n  showCancel?: boolean;\n  onCancel?: () => void;\n  onSubmit?: () => void;\n  submitText?: string;\n  cancelText?: string;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  drawerProps?: Partial<BottomDrawerProps>;\n}\n\nexport const ResponsiveDialog = ({\n  trigger,\n  title,\n  children,\n  size,\n  classNames = {},\n  showCancel = true,\n  onCancel,\n  onSubmit,\n  submitText = \"Submit\",\n  cancelText = \"Cancel\",\n  open,\n  onOpenChange,\n  drawerProps = {},\n}: ResponsiveDialogProps) => {\n  const { isMobile } = useKitzeUI();\n  const { isOpen, setIsOpen, close } = useControlledOpen({\n    open,\n    onOpenChange,\n  });\n\n  const handleCancel = () => {\n    close();\n    if (onCancel) onCancel();\n  };\n\n  const handleSubmit = () => {\n    if (onSubmit) onSubmit();\n    close();\n  };\n\n  const footerContent = (onSubmit || showCancel) && (\n    <div className={cn(\"flex justify-end gap-2 mt-4\", classNames.footer)}>\n      {showCancel && (\n        <CustomButton\n          variant=\"outline\"\n          onClick={handleCancel}\n          className={classNames.cancelButton}\n        >\n          {cancelText}\n        </CustomButton>\n      )}\n      {onSubmit && (\n        <CustomButton\n          onClick={handleSubmit}\n          className={classNames.submitButton}\n        >\n          {submitText}\n        </CustomButton>\n      )}\n    </div>\n  );\n\n  if (isMobile) {\n    return (\n      <BottomDrawer\n        open={isOpen}\n        onOpenChange={setIsOpen}\n        trigger={trigger}\n        title={title}\n        {...drawerProps}\n      >\n        {children}\n      </BottomDrawer>\n    );\n  }\n\n  return (\n    <SimpleDialog\n      open={isOpen}\n      onOpenChange={setIsOpen}\n      trigger={trigger}\n      title={title}\n      size={size}\n      classNames={classNames}\n    >\n      {children}\n      {footerContent}\n    </SimpleDialog>\n  );\n};\n"
    }
  ]
}