{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "theme-switch-minimal-next-themes",
  "type": "registry:component",
  "title": "Theme Switch Minimal with Next-Themes",
  "description": "A minimal theme switcher that integrates with the next-themes library for persistent theme management",
  "registryDependencies": [
    "https://ui.kitze.io/r/theme-switch-minimal.json"
  ],
  "dependencies": [
    "next-themes"
  ],
  "files": [
    {
      "path": "registry/new-york/theme-switch-minimal-next-themes/ThemeSwitchMinimalNextThemes.tsx",
      "type": "registry:component",
      "content": "import { useTheme } from \"next-themes\";\nimport { ReactFC } from \"@/lib/utils\";\nimport { useMounted } from \"@/registry/hooks/useMounted\";\nimport {\n  ThemeSwitchMinimal,\n  ThemeSwitchMinimalClassNames,\n} from \"@/registry/new-york/theme-switch-minimal/ThemeSwitchMinimal\";\nimport { CustomButtonProps } from \"@/registry/new-york/custom-button/CustomButton\";\n\nexport interface ThemeSwitchMinimalNextThemesProps {\n  className?: string;\n  classNames?: ThemeSwitchMinimalClassNames;\n  buttonProps?: Partial<CustomButtonProps>;\n}\n\nexport const ThemeSwitchMinimalNextThemes: ReactFC<\n  ThemeSwitchMinimalNextThemesProps\n> = ({ className, classNames, buttonProps }) => {\n  const { theme, setTheme } = useTheme();\n  const mounted = useMounted();\n\n  if (!mounted) {\n    return null;\n  }\n\n  return (\n    <ThemeSwitchMinimal\n      theme={theme || \"light\"}\n      setTheme={setTheme}\n      className={className}\n      classNames={classNames}\n      buttonProps={buttonProps}\n    />\n  );\n};\n"
    }
  ]
}