{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input",
  "type": "registry:component",
  "title": "Input",
  "description": "A customizable input component with support for left/right icons, loading state, and custom styling",
  "dependencies": [],
  "files": [
    {
      "path": "registry/custom/input/Input.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { ElementType, InputHTMLAttributes, ReactNode } from \"react\";\nimport { Spinner } from \"@/registry/new-york/spinner/Spinner\";\n\nexport interface InputClassNames {\n  container?: string;\n  input?: string;\n  leftIcon?: string;\n  rightIcon?: string;\n  leftItem?: string;\n  rightItem?: string;\n}\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  leftIcon?: ElementType;\n  rightIcon?: ElementType;\n  leftItem?: ReactNode;\n  rightItem?: ReactNode;\n  iconClassName?: string;\n  classNames?: InputClassNames;\n  /**\n   * Whether the input is in a loading state\n   * @default false\n   */\n  isLoading?: boolean;\n  /**\n   * The size of the loading spinner\n   * @default \"sm\"\n   */\n  spinnerSize?: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\n}\n\nexport function Input({\n  className,\n  type,\n  leftIcon,\n  rightIcon,\n  leftItem,\n  rightItem,\n  classNames = {},\n  isLoading = false,\n  spinnerSize = \"sm\",\n  disabled,\n  ref,\n  ...props\n}: InputProps & { ref?: React.Ref<HTMLInputElement> }) {\n  // If loading, override left icon with spinner\n  const effectiveLeftIcon = isLoading ? undefined : leftIcon;\n  const effectiveLeftItem = isLoading ? (\n    <Spinner size={spinnerSize} />\n  ) : (\n    leftItem\n  );\n\n  // Handle both explicit disabled prop and loading state\n  const isDisabled = disabled || isLoading;\n\n  const hasLeft = isLoading || effectiveLeftIcon || effectiveLeftItem;\n  const hasRight = rightIcon || rightItem;\n\n  const inputElement = (\n    <input\n      type={type}\n      className={cn(\n        \"flex h-9 w-full rounded-md bg-transparent px-3 py-1 text-base\",\n        \"transition-all duration-200 ease-in-out\",\n        \"file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground\",\n        \"placeholder:text-muted-foreground\",\n        \"focus:outline-none\",\n        \"disabled:cursor-not-allowed disabled:opacity-50\",\n        \"md:text-sm\",\n        hasLeft && \"pl-1\",\n        hasRight && \"pr-1\",\n        !hasLeft &&\n          !hasRight &&\n          \"border border-input focus-visible:outline-none focus-visible:border-2 focus-visible:border-primary\",\n        !hasLeft && !hasRight && className,\n        classNames.input\n      )}\n      ref={ref}\n      disabled={isDisabled}\n      {...props}\n    />\n  );\n\n  if (!hasLeft && !hasRight) {\n    return inputElement;\n  }\n\n  return (\n    <div\n      className={cn(\n        \"relative flex items-center rounded-md border border-input bg-background\",\n        \"transition-all duration-200 ease-in-out\",\n        \"focus-within:border-2 focus-within:border-primary\",\n        isDisabled && \"opacity-50 cursor-not-allowed\",\n        classNames.container,\n        className\n      )}\n    >\n      {hasLeft && (\n        <div className=\"flex items-center pl-3\">\n          {effectiveLeftIcon && (\n            <div\n              className={cn(\n                \"size-4 text-muted-foreground transition-colors duration-200\",\n                classNames.leftIcon\n              )}\n            >\n              {React.createElement(effectiveLeftIcon)}\n            </div>\n          )}\n          {effectiveLeftItem && (\n            <div className={cn(\"text-foreground\", classNames.leftItem)}>\n              {effectiveLeftItem}\n            </div>\n          )}\n        </div>\n      )}\n      {inputElement}\n      {hasRight && (\n        <div className=\"flex items-center pr-3\">\n          {rightIcon && (\n            <div\n              className={cn(\n                \"size-4 text-muted-foreground transition-colors duration-200\",\n                classNames.rightIcon\n              )}\n            >\n              {React.createElement(rightIcon)}\n            </div>\n          )}\n          {rightItem && (\n            <div className={cn(\"text-foreground\", classNames.rightItem)}>\n              {rightItem}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n"
    }
  ]
}