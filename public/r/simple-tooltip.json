{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "simple-tooltip",
  "type": "registry:component",
  "title": "Simple Tooltip",
  "description": "A simplified tooltip component built on top of Radix UI tooltip",
  "registryDependencies": [
    "tooltip"
  ],
  "files": [
    {
      "path": "registry/new-york/simple-tooltip/SimpleTooltip.tsx",
      "type": "registry:component",
      "target": "components/SimpleTooltip.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { TooltipPortal } from \"@radix-ui/react-tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useKitzeUI } from \"@/registry/new-york/kitze-ui-context/KitzeUIContext\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { BottomDrawer } from \"@/registry/new-york/bottom-drawer/BottomDrawer\";\n\n// Define MobileViewType for SimpleTooltip\nexport type TooltipMobileViewType = \"keep\" | \"popover\" | \"bottom-drawer\";\n\ninterface SimpleTooltipProps {\n  children: React.ReactNode;\n  content: string | React.ReactNode; // Allow ReactNode for popover/drawer\n  className?: string;\n  tooltipClassName?: string;\n  mobileView?: TooltipMobileViewType;\n  drawerTitle?: string; // Title for the bottom drawer\n}\n\nexport const SimpleTooltip: React.FC<SimpleTooltipProps> = ({\n  children,\n  content,\n  className,\n  tooltipClassName,\n  mobileView = \"keep\",\n  drawerTitle,\n}): React.ReactNode => {\n  const { isMobile } = useKitzeUI();\n\n  if (!content) {\n    return children;\n  }\n\n  // --- Mobile Rendering ---\n  if (isMobile) {\n    if (mobileView === \"popover\") {\n      return (\n        <Popover>\n          <PopoverTrigger asChild className={className}>\n            {children}\n          </PopoverTrigger>\n          <PopoverContent\n            className={cn(\"w-auto max-w-[250px]\", tooltipClassName)}\n          >\n            {content}\n          </PopoverContent>\n        </Popover>\n      );\n    }\n\n    if (mobileView === \"bottom-drawer\") {\n      return (\n        <BottomDrawer\n          trigger={children}\n          title={drawerTitle}\n          classNames={{ content: tooltipClassName }} // Pass tooltipClassName to drawer content\n        >\n          <div className=\"p-4\">{content}</div>\n        </BottomDrawer>\n      );\n    }\n    // If mobileView is 'keep', fall through to default Tooltip rendering\n  }\n\n  // --- Default Tooltip Rendering (Desktop or mobileView='keep') ---\n  return (\n    <TooltipProvider delayDuration={0}>\n      <Tooltip>\n        <TooltipTrigger asChild className={className}>\n          {children}\n        </TooltipTrigger>\n        <TooltipPortal>\n          <TooltipContent className={cn(\"max-w-[200px]\", tooltipClassName)}>\n            {typeof content === \"string\"\n              ? content\n              : \"Tooltip content must be a string\"}\n          </TooltipContent>\n        </TooltipPortal>\n      </Tooltip>\n    </TooltipProvider>\n  );\n};\n"
    }
  ]
}