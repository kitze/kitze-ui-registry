{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "theme-switch-minimal",
  "type": "registry:component",
  "title": "Theme Switch Minimal",
  "description": "A minimal theme switch button with smooth icon transitions for light, dark, and system theme modes",
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://ui.kitze.io/r/custom-button.json"
  ],
  "files": [
    {
      "path": "registry/new-york/theme-switch-minimal/ThemeSwitchMinimal.tsx",
      "type": "registry:component",
      "content": "import { ReactFC } from \"@/lib/utils\";\nimport {\n  CustomButton,\n  CustomButtonProps,\n} from \"@/registry/new-york/custom-button/CustomButton\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { LucideSun, LucideMoon, LucideComputer } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface ThemeSwitchMinimalClassNames {\n  button?: string;\n  icon?: string;\n}\n\nexport interface ThemeSwitchMinimalProps\n  extends Omit<CustomButtonProps, \"classNames\"> {\n  classNames?: ThemeSwitchMinimalClassNames;\n  buttonProps?: Partial<CustomButtonProps>;\n  theme: string;\n  setTheme: (theme: string) => void;\n}\n\nexport const ThemeSwitchMinimal: ReactFC<ThemeSwitchMinimalProps> = ({\n  className,\n  classNames = {},\n  buttonProps,\n  theme,\n  setTheme,\n  ...rest\n}) => {\n  const isDark = theme === \"dark\";\n  const isSystem = theme === \"system\";\n\n  const getIcon = () => {\n    if (isDark) return \"dark\";\n    if (isSystem) return \"system\";\n    return \"light\";\n  };\n\n  return (\n    <CustomButton\n      className={cn(\"relative h-9 w-9 p-0\", className, classNames.button)}\n      onClick={() => {\n        setTheme(isDark ? \"light\" : isSystem ? \"dark\" : \"system\");\n      }}\n      {...buttonProps}\n      {...rest}\n    >\n      <AnimatePresence mode=\"wait\">\n        {(() => {\n          switch (getIcon()) {\n            case \"dark\":\n              return (\n                <motion.div\n                  key=\"moon\"\n                  initial={{ opacity: 0, y: 10, rotate: -30 }}\n                  animate={{ opacity: 1, y: 0, rotate: 0 }}\n                  exit={{ opacity: 0, y: -10, rotate: 30 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <LucideMoon className={cn(\"size-4\", classNames.icon)} />\n                </motion.div>\n              );\n            case \"system\":\n              return (\n                <motion.div\n                  key=\"system\"\n                  initial={{ opacity: 0, scale: 0.5 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  exit={{ opacity: 0, scale: 1.5 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <LucideComputer className={cn(\"size-4\", classNames.icon)} />\n                </motion.div>\n              );\n            default:\n              return (\n                <motion.div\n                  key=\"sun\"\n                  initial={{ opacity: 0, y: -10, rotate: -30 }}\n                  animate={{ opacity: 1, y: 0, rotate: 0 }}\n                  exit={{ opacity: 0, y: 10, rotate: 30 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <LucideSun className={cn(\"size-4\", classNames.icon)} />\n                </motion.div>\n              );\n          }\n        })()}\n      </AnimatePresence>\n    </CustomButton>\n  );\n};\n"
    }
  ]
}