{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "simple-select",
  "type": "registry:component",
  "title": "Simple Select",
  "description": "A simplified select component that accepts an array of options with value, label, and search functionality",
  "registryDependencies": [
    "button",
    "command",
    "popover"
  ],
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/new-york/simple-select/SimpleSelect.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { SelectOption } from \"@/lib/select-option\";\n\nexport type SimpleSelectOption = SelectOption;\n\nexport interface SimpleSelectProps {\n  options: SelectOption[];\n  value?: string;\n  onValueChange?: (value: string) => void;\n  placeholder?: string;\n  className?: string;\n  triggerClassName?: string;\n  disabled?: boolean;\n  withSearch?: boolean;\n  searchPlaceholder?: string;\n}\n\nexport function SimpleSelect({\n  options,\n  value,\n  onValueChange,\n  placeholder = \"Select an option\",\n  className,\n  triggerClassName,\n  disabled,\n  withSearch = false,\n  searchPlaceholder = \"Search options...\",\n}: SimpleSelectProps) {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\n            \"w-[200px] justify-between\",\n            triggerClassName,\n            className\n          )}\n        >\n          {value\n            ? options.find((option) => option.value === value)?.label\n            : placeholder}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          {withSearch && <CommandInput placeholder={searchPlaceholder} />}\n          <CommandList>\n            <CommandEmpty>No options found.</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => (\n                <CommandItem\n                  key={option.value}\n                  value={option.value}\n                  onSelect={(currentValue) => {\n                    onValueChange?.(currentValue === value ? \"\" : currentValue);\n                    setOpen(false);\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === option.value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  {option.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n"
    }
  ]
}