{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "simple-select",
  "type": "registry:component",
  "title": "Simple Select",
  "description": "A simplified select component that accepts an array of options with value, label, and search functionality",
  "registryDependencies": [
    "button",
    "command",
    "popover",
    "https://ui.kitze.io/r/kitze-ui-context.json",
    "https://ui.kitze.io/r/responsive-select.json"
  ],
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/new-york/simple-select/SimpleSelect.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { SelectOption } from \"@/lib/select-option\";\nimport { useKitzeUI } from \"@/registry/new-york/kitze-ui-context/KitzeUIContext\";\nimport { useControlledOpen } from \"@/registry/hooks/useControlledOpen\";\nimport { ResponsiveSelectBottomDrawerMenu } from \"@/registry/new-york/responsive-select/ResponsiveSelectBottomDrawerMenu\";\n\nexport type SelectMobileViewType = \"keep\" | \"native\" | \"bottom-drawer\";\n\nexport type SimpleSelectOption = SelectOption;\n\nexport interface SimpleSelectProps {\n  options: SelectOption[];\n  value?: string;\n  onValueChange?: (value: string) => void;\n  placeholder?: string;\n  className?: string;\n  triggerClassName?: string;\n  disabled?: boolean;\n  withSearch?: boolean;\n  searchPlaceholder?: string;\n  mobileView?: SelectMobileViewType;\n  mobileViewSearch?: boolean;\n  drawerTitle?: string;\n}\n\nexport function SimpleSelect({\n  options,\n  value,\n  onValueChange,\n  placeholder = \"Select an option\",\n  className,\n  triggerClassName,\n  disabled,\n  withSearch = false,\n  searchPlaceholder = \"Search options...\",\n  mobileView = \"keep\",\n  mobileViewSearch = false,\n  drawerTitle = \"Select an option\",\n}: SimpleSelectProps) {\n  const { isMobile } = useKitzeUI();\n  const { isOpen, setIsOpen, close } = useControlledOpen({});\n\n  const selectedOption = options.find((option) => option.value === value);\n\n  const triggerButton = (\n    <Button\n      variant=\"outline\"\n      role=\"combobox\"\n      aria-expanded={isOpen}\n      className={cn(\"w-full justify-between\", triggerClassName, className)}\n      onClick={() => setIsOpen(!isOpen)}\n      disabled={disabled}\n    >\n      {value && selectedOption ? (\n        <span className=\"flex items-center truncate\">\n          {selectedOption.icon &&\n            React.createElement(selectedOption.icon, {\n              className: \"mr-2 h-4 w-4\",\n            })}\n          {selectedOption.emoji && (\n            <span className=\"mr-2\">{selectedOption.emoji}</span>\n          )}\n          {selectedOption.label || selectedOption.value}\n        </span>\n      ) : (\n        placeholder\n      )}\n      <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n    </Button>\n  );\n\n  if (isMobile && mobileView === \"native\") {\n    return (\n      <div className={cn(\"relative w-full\", className)}>\n        <div\n          className={cn(\n            \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-within:outline-none focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n            triggerClassName,\n            disabled && \"opacity-50 cursor-not-allowed\"\n          )}\n          aria-disabled={disabled}\n        >\n          <span className=\"flex-grow truncate\">\n            {selectedOption?.icon &&\n              React.createElement(selectedOption.icon, {\n                className: \"mr-2 h-4 w-4 inline\",\n              })}\n            {selectedOption?.emoji && (\n              <span className=\"mr-2\">{selectedOption.emoji}</span>\n            )}\n            {value && selectedOption\n              ? selectedOption.label || value\n              : placeholder}\n          </span>\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 opacity-50 shrink-0\" />\n        </div>\n        <select\n          value={value || \"\"}\n          onChange={(e) => onValueChange?.(e.target.value)}\n          disabled={disabled}\n          className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer z-10\"\n        >\n          {placeholder && (\n            <option value=\"\" disabled hidden>\n              {placeholder}\n            </option>\n          )}\n          {options.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label || option.value}\n            </option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n\n  if (isMobile && mobileView === \"bottom-drawer\") {\n    return (\n      <ResponsiveSelectBottomDrawerMenu\n        options={options}\n        value={value}\n        onValueChange={(val) => {\n          onValueChange?.(val);\n          close();\n        }}\n        placeholder={placeholder}\n        drawerTitle={drawerTitle}\n        open={isOpen}\n        onOpenChange={setIsOpen}\n        searchPlaceholder={searchPlaceholder}\n        showSearch={mobileViewSearch}\n        triggerClassName={triggerClassName}\n        className={className}\n        disabled={disabled}\n      >\n        {triggerButton}\n      </ResponsiveSelectBottomDrawerMenu>\n    );\n  }\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        {React.cloneElement(triggerButton, { \"aria-expanded\": isOpen })}\n      </PopoverTrigger>\n      <PopoverContent\n        className={cn(\"w-[--radix-popover-trigger-width] p-0\", className)}\n        style={{\n          minWidth: \"var(--radix-popover-trigger-width)\",\n        }}\n      >\n        <Command>\n          {withSearch && <CommandInput placeholder={searchPlaceholder} />}\n          <CommandList>\n            <CommandEmpty>No options found.</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => (\n                <CommandItem\n                  key={option.value}\n                  value={option.value}\n                  onSelect={(currentValue) => {\n                    onValueChange?.(currentValue === value ? \"\" : currentValue);\n                    setIsOpen(false);\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === option.value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  {option.icon &&\n                    React.createElement(option.icon, {\n                      className: \"mr-2 h-4 w-4\",\n                    })}\n                  {option.emoji && <span className=\"mr-2\">{option.emoji}</span>}\n                  {option.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "target": "components/SimpleSelect.tsx"
    },
    {
      "path": "registry/new-york/simple-select/SimpleSelectBottomDrawerMenu.tsx",
      "type": "registry:component",
      "content": "/* File not found: registry/new-york/simple-select/SimpleSelectBottomDrawerMenu.tsx */",
      "target": "components/SimpleSelectBottomDrawerMenu.tsx"
    },
    {
      "path": "registry/hooks/useControlledOpen.ts",
      "type": "registry:hook",
      "content": "import { useState, useEffect } from \"react\";\n\ninterface UseControlledOpenProps {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\ninterface UseControlledOpenResult {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  close: () => void;\n}\n\nexport const useControlledOpen = ({\n  open,\n  onOpenChange,\n}: UseControlledOpenProps): UseControlledOpenResult => {\n  const [internalOpen, setInternalOpen] = useState(false);\n\n  // Determine if the component is controlled or uncontrolled\n  const isControlled = open !== undefined;\n  const isOpen = isControlled ? open : internalOpen;\n\n  const setIsOpen = (newOpen: boolean) => {\n    if (!isControlled) {\n      setInternalOpen(newOpen);\n    }\n    if (onOpenChange) {\n      onOpenChange(newOpen);\n    }\n  };\n\n  const close = () => setIsOpen(false);\n\n  // Sync internal state with controlled prop\n  useEffect(() => {\n    if (isControlled) {\n      setInternalOpen(open);\n    }\n  }, [isControlled, open]);\n\n  return { isOpen, setIsOpen, close };\n};\n",
      "target": "hooks/useControlledOpen.ts"
    }
  ]
}