{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-field-input",
  "type": "registry:component",
  "title": "Form Field Input",
  "description": "An input component integrated with react-hook-form using FormFieldWrapper.",
  "registryDependencies": [
    "https://ui.kitze.io/r/input.json",
    "https://ui.kitze.io/r/form-field-wrapper.json"
  ],
  "dependencies": [
    "react-hook-form"
  ],
  "files": [
    {
      "path": "registry/new-york/form-field-input/FormFieldInput.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  FormFieldWrapper,\n  FormFieldWrapperProps,\n} from \"@/registry/new-york/form-field-wrapper/FormFieldWrapper\";\nimport { FieldValues, FieldPath } from \"react-hook-form\";\n\nexport interface FormFieldInputProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> extends Omit<FormFieldWrapperProps<TFieldValues, TName>, \"children\"> {\n  placeholder?: string;\n  type?: string;\n}\n\nexport function FormFieldInput<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  placeholder,\n  type = \"text\",\n  ...wrapperProps\n}: FormFieldInputProps<TFieldValues, TName>) {\n  return (\n    <FormFieldWrapper<TFieldValues, TName> {...wrapperProps}>\n      {(field) => <Input type={type} placeholder={placeholder} {...field} />}\n    </FormFieldWrapper>\n  );\n}\n"
    },
    {
      "path": "registry/new-york/form-field-input/preview.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { FormFieldInput } from \"./FormFieldInput\";\nimport { Button } from \"@/components/ui/button\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nconst schema = z.object({\n  email: z.string().email(\"Invalid email address\").min(1, \"Email is required\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n});\n\ntype Schema = z.infer<typeof schema>;\n\nexport default function FormFieldInputPreview() {\n  const form = useForm<Schema>({\n    resolver: zodResolver(schema),\n    defaultValues: { email: \"\", password: \"\" },\n  });\n\n  return (\n    <FormProvider {...form}>\n      <form\n        onSubmit={form.handleSubmit((data) => console.log(data))}\n        className=\"space-y-4\"\n      >\n        <FormFieldInput\n          name=\"email\"\n          label=\"Email Address\"\n          type=\"email\"\n          placeholder=\"you@example.com\"\n          required\n        />\n        <FormFieldInput\n          name=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          description=\"Must be at least 8 characters long.\"\n          required\n        />\n        <Button type=\"submit\">Login</Button>\n      </form>\n    </FormProvider>\n  );\n}\n"
    }
  ]
}