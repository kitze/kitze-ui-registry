{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tab-panels",
  "type": "registry:component",
  "title": "Tab Panels",
  "description": "A component to display content in tabs using a segmented control.",
  "registryDependencies": [
    "https://ui.kitze.io/r/segmented-control.json"
  ],
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/new-york/tab-panels/TabPanels.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport {\n  SegmentedControl,\n  SegmentedControlOption,\n  SegmentedControlMobileViewType,\n} from \"@/registry/new-york/segmented-control/SegmentedControl\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { LucideIcon } from \"lucide-react\";\n\nexport interface TabPanelProps {\n  value: string;\n  label: string;\n  icon: LucideIcon;\n  content: React.ReactNode;\n}\n\nexport interface TabPanelsProps {\n  tabs: TabPanelProps[];\n  defaultTab?: string;\n  title?: string;\n  // For controlled usage\n  activeTab?: string;\n  onTabChange?: (tab: string) => void;\n  // Mobile view props for SegmentedControl\n  mobileView?: SegmentedControlMobileViewType;\n  drawerTitle?: string;\n  placeholder?: string;\n}\n\nexport function TabPanels({\n  tabs,\n  defaultTab,\n  title,\n  activeTab: controlledActiveTab,\n  onTabChange,\n  mobileView,\n  drawerTitle,\n  placeholder,\n}: TabPanelsProps) {\n  if (!tabs || tabs.length === 0) {\n    return null;\n  }\n\n  const firstTab = tabs[0]!;\n\n  const initialTab =\n    defaultTab && tabs.some((tab) => tab.value === defaultTab)\n      ? defaultTab\n      : firstTab.value;\n\n  const [internalActiveTab, setInternalActiveTab] =\n    useState<string>(initialTab);\n\n  const isControlled = controlledActiveTab !== undefined;\n  const activeTab = isControlled ? controlledActiveTab : internalActiveTab;\n\n  useEffect(() => {\n    if (isControlled && controlledActiveTab !== internalActiveTab) {\n      setInternalActiveTab(controlledActiveTab);\n    }\n  }, [controlledActiveTab, internalActiveTab, isControlled]);\n\n  const tabOptions: SegmentedControlOption[] = tabs.map((tab) => ({\n    value: tab.value,\n    label: tab.label,\n    leftIcon: tab.icon,\n  }));\n\n  const handleTabChange = (value: string) => {\n    if (!isControlled) {\n      setInternalActiveTab(value);\n    }\n\n    if (onTabChange) {\n      onTabChange(value);\n    }\n  };\n\n  const activeTabContent =\n    tabs.find((tab) => tab.value === activeTab)?.content || firstTab.content;\n\n  return (\n    <div className=\"vertical gap-6\">\n      {title && <div className=\"text-2xl font-semibold\">{title}</div>}\n\n      <SegmentedControl\n        options={tabOptions}\n        value={activeTab}\n        onChange={handleTabChange}\n        size=\"md\"\n        className=\"w-full\"\n        mobileView={mobileView}\n        drawerTitle={drawerTitle}\n        placeholder={placeholder}\n      />\n\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={activeTab}\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          exit={{ opacity: 0, x: -20 }}\n          transition={{ duration: 0.25, ease: \"easeInOut\" }}\n        >\n          {activeTabContent}\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  );\n}\n",
      "target": "components/TabPanels.tsx"
    }
  ]
}