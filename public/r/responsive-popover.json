{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "responsive-popover",
  "type": "registry:component",
  "title": "Responsive Popover",
  "description": "A responsive popover component that displays as a popover on desktop and a bottom drawer on mobile.",
  "registryDependencies": [
    "https://ui.kitze.io/r/simple-popover.json",
    "https://ui.kitze.io/r/bottom-drawer.json",
    "https://ui.kitze.io/r/kitze-ui-context.json"
  ],
  "files": [
    {
      "path": "registry/new-york/responsive-popover/index.tsx",
      "type": "registry:component",
      "content": "import * as React from \"react\";\nimport { useKitzeUI } from \"@/registry/new-york/kitze-ui-context/KitzeUIContext\";\nimport { useControlledOpen } from \"@/registry/hooks/useControlledOpen\";\nimport { SimplePopover } from \"@/registry/new-york/simple-popover\";\nimport {\n  BottomDrawer,\n  BottomDrawerProps,\n} from \"@/registry/new-york/bottom-drawer/BottomDrawer\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface ResponsivePopoverProps {\n  trigger: React.ReactNode;\n  content: React.ReactNode;\n  classNames?: {\n    content?: string;\n    trigger?: string;\n    drawer?: string;\n  };\n  align?: \"start\" | \"center\" | \"end\";\n  sideOffset?: number;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  drawerTitle?: string;\n  drawerProps?: Partial<BottomDrawerProps>;\n}\n\nexport const ResponsivePopover = ({\n  trigger,\n  content,\n  classNames = {},\n  align = \"center\",\n  sideOffset = 4,\n  open,\n  onOpenChange,\n  drawerTitle,\n  drawerProps = {},\n}: ResponsivePopoverProps) => {\n  const { isMobile } = useKitzeUI();\n  const { isOpen, setIsOpen } = useControlledOpen({\n    open,\n    onOpenChange,\n  });\n\n  if (isMobile) {\n    return (\n      <BottomDrawer\n        open={isOpen}\n        onOpenChange={setIsOpen}\n        trigger={trigger}\n        title={drawerTitle}\n        classNames={{\n          content: cn(classNames.drawer),\n          ...drawerProps.classNames,\n        }}\n        {...drawerProps}\n      >\n        <div className=\"py-2\">{content}</div>\n      </BottomDrawer>\n    );\n  }\n\n  return (\n    <SimplePopover\n      trigger={trigger}\n      content={content}\n      classNames={classNames}\n      align={align}\n      sideOffset={sideOffset}\n    />\n  );\n};\n"
    },
    {
      "path": "registry/new-york/responsive-popover/preview.tsx",
      "type": "registry:component",
      "content": "import React, { useState } from \"react\";\nimport { ResponsivePopover } from \"./index\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function ResponsivePopoverPreview() {\n  const [popoverOpen, setPopoverOpen] = useState(false);\n\n  const contentExample = (\n    <div className=\"p-2\">\n      <h4 className=\"font-medium mb-2\">Popover Content</h4>\n      <p className=\"text-sm text-muted-foreground\">\n        This shows as a popover on desktop and a drawer on mobile.\n      </p>\n    </div>\n  );\n\n  return (\n    <div className=\"flex flex-col items-center justify-center gap-8 p-8\">\n      <div className=\"flex flex-col gap-4\">\n        <h3 className=\"text-sm font-medium\">Basic Responsive Popover</h3>\n        <ResponsivePopover\n          trigger={<Button variant=\"outline\">Click me</Button>}\n          content={contentExample}\n          drawerTitle=\"Responsive Example\"\n        />\n      </div>\n\n      <div className=\"flex flex-col gap-4\">\n        <h3 className=\"text-sm font-medium\">Controlled Responsive Popover</h3>\n        <div className=\"flex flex-col items-center gap-4\">\n          <ResponsivePopover\n            open={popoverOpen}\n            onOpenChange={setPopoverOpen}\n            trigger={\n              <Button variant=\"outline\">\n                Controlled ({popoverOpen ? \"Open\" : \"Closed\"})\n              </Button>\n            }\n            content={contentExample}\n            drawerTitle=\"Controlled Example\"\n          />\n          <Button\n            variant=\"secondary\"\n            onClick={() => setPopoverOpen(!popoverOpen)}\n          >\n            Toggle Popover\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
    }
  ]
}