{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "simple-popover",
  "type": "registry:component",
  "title": "Simple Popover",
  "description": "A simple popover component that displays content when triggered.",
  "registryDependencies": [
    "popover"
  ],
  "files": [
    {
      "path": "registry/new-york/simple-popover/index.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { ReactFC, cn } from \"@/lib/utils\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { useKitzeUI } from \"@/registry/new-york/kitze-ui-context/KitzeUIContext\";\nimport { useControlledOpen } from \"@/registry/hooks/useControlledOpen\";\nimport {\n  BottomDrawer,\n  BottomDrawerProps,\n} from \"@/registry/new-york/bottom-drawer/BottomDrawer\";\n\n// Define MobileViewType for Popover\nexport type PopoverMobileViewType = \"keep\" | \"bottom-drawer\";\n\nexport interface SimplePopoverClassNames {\n  content?: string;\n  drawer?: string; // Class for drawer content\n}\n\nexport interface SimplePopoverProps {\n  trigger?: React.ReactNode;\n  content: React.ReactNode;\n  classNames?: SimplePopoverClassNames;\n  align?: \"start\" | \"center\" | \"end\";\n  sideOffset?: number;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  // Mobile specific props\n  mobileView?: PopoverMobileViewType;\n  drawerTitle?: string;\n  drawerProps?: Partial<\n    Omit<\n      BottomDrawerProps,\n      \"children\" | \"trigger\" | \"title\" | \"open\" | \"onOpenChange\"\n    >\n  >;\n}\n\nexport const SimplePopover: ReactFC<SimplePopoverProps> = ({\n  trigger,\n  content,\n  classNames = {},\n  align = \"center\",\n  sideOffset = 4,\n  open,\n  onOpenChange,\n  mobileView = \"keep\",\n  drawerTitle,\n  drawerProps = {},\n}) => {\n  const { isMobile } = useKitzeUI();\n  const { isOpen, setIsOpen } = useControlledOpen({\n    open,\n    onOpenChange,\n  });\n\n  // --- Mobile Rendering (Bottom Drawer) ---\n  if (isMobile && mobileView === \"bottom-drawer\") {\n    return (\n      <BottomDrawer\n        open={isOpen}\n        onOpenChange={setIsOpen}\n        trigger={trigger}\n        title={drawerTitle}\n        classNames={{\n          content: cn(classNames.drawer, drawerProps.classNames?.content), // Combine classes\n          ...drawerProps.classNames,\n        }}\n        {...drawerProps}\n      >\n        {/* Apply padding or specific styling if needed */}\n        <div className=\"py-2\">{content}</div>\n      </BottomDrawer>\n    );\n  }\n\n  // --- Default Popover Rendering (Desktop or mobileView='keep') ---\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      {trigger && <PopoverTrigger asChild>{trigger}</PopoverTrigger>}\n      <PopoverContent\n        className={classNames.content}\n        align={align}\n        sideOffset={sideOffset}\n      >\n        {content}\n      </PopoverContent>\n    </Popover>\n  );\n};\n",
      "target": "components/index.tsx"
    }
  ]
}