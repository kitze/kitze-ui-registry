{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dialog-manager",
  "type": "registry:component",
  "title": "Dialog Manager",
  "description": "A context-based dialog management system that allows for opening, closing, and managing multiple dialogs in your React application.",
  "registryDependencies": [
    "https://ui.kitze.io/r/simple-dialog.json"
  ],
  "files": [
    {
      "path": "registry/new-york/dialog-manager/DialogManager.tsx",
      "type": "registry:component",
      "target": "components/DialogManager.tsx",
      "content": "import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n  memo,\n} from \"react\";\nimport {\n  SimpleDialog,\n  SimpleDialogProps,\n} from \"@/registry/new-york/simple-dialog/SimpleDialog\";\nimport { cn } from \"@/lib/utils\";\n\nexport type OpenDialogProps = {\n  title?: string;\n  component:\n    | ((props: { close: () => void }) => React.ReactNode)\n    | React.ComponentType<any>;\n  props?: Record<string, any>;\n  size?: SimpleDialogProps[\"size\"];\n  classNames?: SimpleDialogProps[\"classNames\"];\n  mobileView?: SimpleDialogProps[\"mobileView\"];\n  drawerTitle?: SimpleDialogProps[\"drawerTitle\"];\n  showCancel?: SimpleDialogProps[\"showCancel\"];\n  showCloseButton?: SimpleDialogProps[\"showCloseButton\"];\n  onCancel?: SimpleDialogProps[\"onCancel\"];\n  onSubmit?: SimpleDialogProps[\"onSubmit\"];\n  submitText?: SimpleDialogProps[\"submitText\"];\n  cancelText?: SimpleDialogProps[\"cancelText\"];\n};\n\ntype DialogConfig = OpenDialogProps & {\n  id: string;\n};\n\ntype DialogContextType = {\n  openDialog: (config: OpenDialogProps) => string;\n  closeDialog: (id: string) => void;\n  closeAllDialogs: () => void;\n};\n\nconst DialogContext = createContext<DialogContextType | null>(null);\n\nexport const useDialog = () => {\n  const context = useContext(DialogContext);\n  if (!context) {\n    throw new Error(\"useDialog must be used within a DialogProvider\");\n  }\n  return context;\n};\n\nexport type DialogManagerProps = {\n  classNames?: {\n    root?: string;\n  };\n  mobileView?: SimpleDialogProps[\"mobileView\"];\n  children?: React.ReactNode;\n};\n\nconst DialogList = memo(function DialogList({\n  dialogs,\n  onClose,\n  defaultMobileView,\n}: {\n  dialogs: DialogConfig[];\n  onClose: (id: string) => void;\n  defaultMobileView?: SimpleDialogProps[\"mobileView\"];\n}) {\n  return (\n    <>\n      {dialogs.map(\n        ({\n          id,\n          title,\n          component: Component,\n          props,\n          size,\n          classNames,\n          mobileView,\n          drawerTitle,\n          showCancel,\n          showCloseButton,\n          onCancel,\n          onSubmit,\n          submitText,\n          cancelText,\n        }) => (\n          <div key={id} className=\"pointer-events-auto\">\n            <SimpleDialog\n              title={title}\n              open={true}\n              onOpenChange={(open: boolean) => {\n                if (!open) onClose(id);\n              }}\n              size={size}\n              classNames={classNames}\n              mobileView={\n                mobileView !== undefined ? mobileView : defaultMobileView\n              }\n              drawerTitle={drawerTitle}\n              showCancel={showCancel}\n              showCloseButton={showCloseButton}\n              onCancel={() => {\n                if (onCancel) onCancel();\n                onClose(id);\n              }}\n              {...(onSubmit && {\n                onSubmit: () => {\n                  onSubmit();\n                  onClose(id);\n                },\n              })}\n              submitText={submitText}\n              cancelText={cancelText}\n            >\n              {/* Render the component passed to openDialog */}\n              {typeof Component === \"function\" ? (\n                <Component {...props} close={() => onClose(id)} />\n              ) : (\n                // Re-add ts-ignore as Component type might be complex for TSX\n                // @ts-ignore\n                <Component {...props} />\n              )}\n            </SimpleDialog>\n          </div>\n        )\n      )}\n    </>\n  );\n});\n\nexport const DialogManager = memo(function DialogManager({\n  classNames,\n  mobileView,\n  children,\n}: DialogManagerProps) {\n  const [dialogs, setDialogs] = useState<DialogConfig[]>([]);\n\n  const openDialog = useCallback((config: OpenDialogProps) => {\n    const id = Math.random().toString(36).substring(7);\n    setDialogs((prev) => {\n      const newDialogs = [...prev, { ...config, id }];\n      return newDialogs;\n    });\n    return id;\n  }, []);\n\n  const closeDialog = useCallback((id: string) => {\n    setDialogs((prev) => prev.filter((dialog) => dialog.id !== id));\n  }, []);\n\n  const closeAllDialogs = useCallback(() => {\n    setDialogs([]);\n  }, []);\n\n  const contextValue = useMemo(\n    () => ({\n      openDialog,\n      closeDialog,\n      closeAllDialogs,\n    }),\n    [openDialog, closeDialog, closeAllDialogs]\n  );\n\n  return (\n    <DialogContext.Provider value={contextValue}>\n      {children}\n      <div\n        className={cn(\n          \"pointer-events-none fixed inset-0 z-[100]\",\n          classNames?.root\n        )}\n      >\n        <DialogList\n          dialogs={dialogs}\n          onClose={closeDialog}\n          defaultMobileView={mobileView}\n        />\n      </div>\n    </DialogContext.Provider>\n  );\n});\n"
    }
  ]
}