{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "simple-dialog",
  "type": "registry:component",
  "title": "Simple Dialog",
  "description": "A simple dialog component using Radix UI.",
  "registryDependencies": [
    "dialog",
    "https://ui.kitze.io/r/bottom-drawer.json",
    "https://ui.kitze.io/r/custom-button.json"
  ],
  "dependencies": [
    "next",
    "react",
    "react-dom",
    "tailwindcss",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "path": "registry/new-york/simple-dialog/SimpleDialog.tsx",
      "type": "registry:component",
      "content": "import React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { useControlledOpen } from \"@/registry/hooks/useControlledOpen\";\nimport { useKitzeUI } from \"@/registry/new-york/kitze-ui-context/KitzeUIContext\";\nimport { BottomDrawer } from \"@/registry/new-york/bottom-drawer/BottomDrawer\";\nimport { CustomButton } from \"@/registry/new-york/custom-button/CustomButton\";\n\nexport type DialogMobileViewType = \"keep\" | \"bottom-drawer\";\n\nexport type DialogSize =\n  | \"sm\"\n  | \"md\"\n  | \"lg\"\n  | \"xl\"\n  | \"2xl\"\n  | \"3xl\"\n  | \"4xl\"\n  | \"5xl\"\n  | \"full\";\n\nexport type DialogClassNames = {\n  root?: string;\n  content?: string;\n  header?: string;\n  title?: string;\n  body?: string;\n  footer?: string;\n  submitButton?: string;\n  cancelButton?: string;\n  drawerRoot?: string;\n  drawerContent?: string;\n  drawerHeader?: string;\n  drawerFooter?: string;\n};\n\nexport interface SimpleDialogProps {\n  trigger?: React.ReactNode;\n  title?: string;\n  children: React.ReactNode;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  size?: DialogSize;\n  classNames?: DialogClassNames;\n  mobileView?: DialogMobileViewType;\n  drawerTitle?: string;\n  showCancel?: boolean;\n  onCancel?: () => void;\n  onSubmit?: () => void;\n  submitText?: string;\n  cancelText?: string;\n}\n\nconst sizeToMaxWidth: Record<DialogSize, string> = {\n  sm: \"sm:max-w-[425px]\",\n  md: \"sm:max-w-[550px]\",\n  lg: \"sm:max-w-[680px]\",\n  xl: \"sm:max-w-[800px]\",\n  \"2xl\": \"sm:max-w-[1024px]\",\n  \"3xl\": \"sm:max-w-[1280px]\",\n  \"4xl\": \"sm:max-w-[1536px]\",\n  \"5xl\": \"sm:max-w-[1920px]\",\n  full: \"sm:max-w-[100vw]\",\n};\n\nexport const SimpleDialog = ({\n  trigger = \"Open\",\n  title,\n  children,\n  open,\n  onOpenChange,\n  size = \"sm\",\n  classNames = {},\n  mobileView = \"keep\",\n  drawerTitle,\n  showCancel = true,\n  onCancel,\n  onSubmit,\n  submitText = \"Submit\",\n  cancelText = \"Cancel\",\n}: SimpleDialogProps) => {\n  const { isMobile } = useKitzeUI();\n  const { isOpen, setIsOpen, close } = useControlledOpen({\n    open,\n    onOpenChange,\n  });\n\n  const handleCancel = () => {\n    close();\n    if (onCancel) onCancel();\n  };\n\n  const handleSubmit = () => {\n    if (onSubmit) onSubmit();\n    close();\n  };\n\n  const footerContent = (onSubmit || showCancel) && (\n    <div className={cn(\"flex justify-end gap-2 pt-4\", classNames.footer)}>\n      {showCancel && (\n        <CustomButton\n          variant=\"outline\"\n          onClick={handleCancel}\n          className={classNames.cancelButton}\n        >\n          {cancelText}\n        </CustomButton>\n      )}\n      {onSubmit && (\n        <CustomButton\n          onClick={handleSubmit}\n          className={classNames.submitButton}\n        >\n          {submitText}\n        </CustomButton>\n      )}\n    </div>\n  );\n\n  if (isMobile && mobileView === \"bottom-drawer\") {\n    return (\n      <BottomDrawer\n        open={isOpen}\n        onOpenChange={setIsOpen}\n        trigger={trigger}\n        title={drawerTitle || title}\n        classNames={{\n          content: classNames.drawerContent,\n          headerWrapper: classNames.drawerHeader,\n        }}\n      >\n        <div className={cn(\"px-6 pt-0\", classNames.body)}>{children}</div>\n        {footerContent && (\n          <div\n            className={cn(classNames.drawerFooter, \"pt-4 px-6 pb-6 md:pb-2\")}\n          >\n            {footerContent}\n          </div>\n        )}\n      </BottomDrawer>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      {trigger && (\n        <DialogTrigger asChild>\n          {typeof trigger === \"string\" ? (\n            <CustomButton>{trigger}</CustomButton>\n          ) : (\n            trigger\n          )}\n        </DialogTrigger>\n      )}\n      <DialogContent\n        className={cn(\n          sizeToMaxWidth[size],\n          classNames.root,\n          classNames.content\n        )}\n      >\n        {title && (\n          <DialogHeader className={classNames.header}>\n            <DialogTitle className={classNames.title}>{title}</DialogTitle>\n          </DialogHeader>\n        )}\n        <div className={cn(\"py-4\", classNames.body)}>{children}</div>\n        {footerContent && (\n          <DialogFooter className={classNames.footer}>\n            {showCancel && (\n              <CustomButton\n                variant=\"outline\"\n                onClick={handleCancel}\n                className={classNames.cancelButton}\n              >\n                {cancelText}\n              </CustomButton>\n            )}\n            {onSubmit && (\n              <CustomButton\n                onClick={handleSubmit}\n                className={classNames.submitButton}\n              >\n                {submitText}\n              </CustomButton>\n            )}\n          </DialogFooter>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n};\n"
    }
  ]
}