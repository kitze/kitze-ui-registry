{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ui-alert",
  "type": "registry:component",
  "title": "UI Alert",
  "description": "A collection of alert components with confirm and delete variations",
  "dependencies": [],
  "registryDependencies": ["KitzeUIContext"],
  "files": [
    {
      "path": "registry/new-york/ui-alert/Alert.tsx",
      "type": "registry:component",
      "content": "\"use client\";\nimport React from \"react\";\nimport {\n  AlertDialog,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogFooter,\n} from \"@/components/ui/alert-dialog\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface AlertProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  title?: string;\n  description?: string;\n  variant?: \"default\" | \"destructive\" | \"success\";\n  children?: React.ReactNode;\n}\n\nexport const Alert = React.memo(\n  ({\n    open,\n    onOpenChange,\n    title = \"Alert\",\n    description,\n    variant = \"default\",\n    children,\n  }: AlertProps) => {\n    return (\n      <AlertDialog open={open} onOpenChange={onOpenChange}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle\n              className={cn(\n                variant === \"destructive\" && \"text-red-600 dark:text-red-400\",\n                variant === \"success\" && \"text-green-600 dark:text-green-400\",\n                variant === \"default\" && \"text-blue-600 dark:text-blue-400\"\n              )}\n            >\n              {title}\n            </AlertDialogTitle>\n            {description && (\n              <AlertDialogDescription>{description}</AlertDialogDescription>\n            )}\n          </AlertDialogHeader>\n          <AlertDialogFooter>{children}</AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    );\n  }\n);\n\nAlert.displayName = \"Alert\";\n"
    },
    {
      "path": "registry/new-york/ui-alert/ConfirmAlert.tsx",
      "type": "registry:component",
      "content": "\"use client\";\nimport React from \"react\";\nimport { Alert, AlertProps } from \"./Alert\";\nimport {\n  AlertDialogAction,\n  AlertDialogCancel,\n} from \"@/components/ui/alert-dialog\";\n\nexport interface ConfirmAlertProps extends Omit<AlertProps, \"children\"> {\n  confirmLabel?: string;\n  cancelLabel?: string;\n  onConfirm: () => void;\n}\n\nexport const ConfirmAlert = React.memo(\n  ({\n    open,\n    onOpenChange,\n    title = \"Confirm\",\n    description,\n    variant = \"default\",\n    confirmLabel = \"Confirm\",\n    cancelLabel = \"Cancel\",\n    onConfirm,\n  }: ConfirmAlertProps) => {\n    const handleConfirm = () => {\n      onConfirm();\n      onOpenChange(false);\n    };\n\n    return (\n      <Alert\n        open={open}\n        onOpenChange={onOpenChange}\n        title={title}\n        description={description}\n        variant={variant}\n      >\n        <AlertDialogCancel>{cancelLabel}</AlertDialogCancel>\n        <AlertDialogAction\n          onClick={handleConfirm}\n          className={\n            variant === \"destructive\"\n              ? \"bg-red-600 hover:bg-red-700\"\n              : undefined\n          }\n        >\n          {confirmLabel}\n        </AlertDialogAction>\n      </Alert>\n    );\n  }\n);\n\nConfirmAlert.displayName = \"ConfirmAlert\";\n"
    },
    {
      "path": "registry/new-york/ui-alert/ConfirmAlertDelete.tsx",
      "type": "registry:component",
      "content": "\"use client\";\nimport React from \"react\";\nimport { Trash2 } from \"lucide-react\";\nimport { ConfirmAlert, ConfirmAlertProps } from \"./ConfirmAlert\";\n\nexport interface ConfirmAlertDeleteProps\n  extends Omit<ConfirmAlertProps, \"variant\"> {\n  title?: string;\n  itemName?: string;\n}\n\nexport const ConfirmAlertDelete = React.memo(\n  ({\n    open,\n    onOpenChange,\n    title = \"Confirm Delete\",\n    description,\n    itemName,\n    confirmLabel = \"Delete\",\n    cancelLabel = \"Cancel\",\n    onConfirm,\n  }: ConfirmAlertDeleteProps) => {\n    const finalDescription =\n      description ||\n      `Are you sure you want to delete ${\n        itemName ? `\"${itemName}\"` : \"this item\"\n      }? This action cannot be undone.`;\n\n    return (\n      <ConfirmAlert\n        open={open}\n        onOpenChange={onOpenChange}\n        title={title}\n        description={finalDescription}\n        variant=\"destructive\"\n        confirmLabel={confirmLabel}\n        cancelLabel={cancelLabel}\n        onConfirm={onConfirm}\n      />\n    );\n  }\n);\n\nConfirmAlertDelete.displayName = \"ConfirmAlertDelete\";\n"
    },
    {
      "path": "registry/new-york/ui-alert/AlertContext.tsx",
      "type": "registry:component",
      "content": "\"use client\";\nimport React, {\n  createContext,\n  useContext,\n  useReducer,\n  useCallback,\n  ReactNode,\n  useState,\n} from \"react\";\nimport { ConfirmAlert, ConfirmAlertProps } from \"./ConfirmAlert\";\nimport {\n  ConfirmAlertDelete,\n  ConfirmAlertDeleteProps,\n} from \"./ConfirmAlertDelete\";\n\n// Alert Types\nexport type AlertId = string;\nexport type AlertType = \"confirm\" | \"delete\";\n\n// Generic Alert\nexport interface BaseAlert {\n  id: AlertId;\n  type: AlertType;\n  open: boolean;\n}\n\n// Type definitions for specific alerts\nexport interface ConfirmAlertData extends BaseAlert {\n  type: \"confirm\";\n  props: Omit<ConfirmAlertProps, \"open\" | \"onOpenChange\">;\n}\n\nexport interface DeleteAlertData extends BaseAlert {\n  type: \"delete\";\n  props: Omit<ConfirmAlertDeleteProps, \"open\" | \"onOpenChange\">;\n}\n\n// Union type for all alert data\nexport type AlertData = ConfirmAlertData | DeleteAlertData;\n\n// Alert context state type\ninterface AlertContextState {\n  alerts: AlertData[];\n}\n\n// Alert context actions\ntype AlertAction =\n  | { type: \"ADD_ALERT\"; payload: AlertData }\n  | { type: \"REMOVE_ALERT\"; payload: { id: AlertId } }\n  | { type: \"SET_ALERT_OPEN\"; payload: { id: AlertId; open: boolean } };\n\n// Initial state\nconst initialState: AlertContextState = {\n  alerts: [],\n};\n\n// Alert reducer\nconst alertReducer = (\n  state: AlertContextState,\n  action: AlertAction\n): AlertContextState => {\n  switch (action.type) {\n    case \"ADD_ALERT\":\n      return {\n        ...state,\n        alerts: [...state.alerts, action.payload],\n      };\n    case \"REMOVE_ALERT\":\n      return {\n        ...state,\n        alerts: state.alerts.filter((alert) => alert.id !== action.payload.id),\n      };\n    case \"SET_ALERT_OPEN\":\n      return {\n        ...state,\n        alerts: state.alerts.map((alert) =>\n          alert.id === action.payload.id\n            ? { ...alert, open: action.payload.open }\n            : alert\n        ),\n      };\n    default:\n      return state;\n  }\n};\n\n// Generate unique IDs for alerts\nconst generateId = (): string => {\n  return Math.random().toString(36).substr(2, 9);\n};\n\n// Alert context type\ninterface AlertContextValue {\n  alerts: AlertData[];\n  confirmAlert: (\n    props: Omit<ConfirmAlertProps, \"open\" | \"onOpenChange\">\n  ) => void;\n  confirmAlertDelete: (\n    props: Omit<ConfirmAlertDeleteProps, \"open\" | \"onOpenChange\">\n  ) => void;\n  handleOpenChange: (id: AlertId, open: boolean) => void;\n}\n\n// Create context\nconst AlertContext = createContext<AlertContextValue | undefined>(undefined);\n\n// Alert provider props\nexport interface AlertProviderProps {\n  children: ReactNode;\n}\n\n// Alert provider component\nexport const AlertProvider: React.FC<AlertProviderProps> = ({ children }) => {\n  const [state, dispatch] = useReducer(alertReducer, initialState);\n\n  // Handle open state change\n  const handleOpenChange = useCallback((id: AlertId, open: boolean) => {\n    if (!open) {\n      // When closing, set open to false first (for animation)\n      dispatch({ type: \"SET_ALERT_OPEN\", payload: { id, open } });\n\n      // Then remove after animation finishes\n      setTimeout(() => {\n        dispatch({ type: \"REMOVE_ALERT\", payload: { id } });\n      }, 300);\n    } else {\n      dispatch({ type: \"SET_ALERT_OPEN\", payload: { id, open } });\n    }\n  }, []);\n\n  // Show confirm alert action\n  const confirmAlert = useCallback(\n    (props: Omit<ConfirmAlertProps, \"open\" | \"onOpenChange\">) => {\n      const id = generateId();\n      dispatch({\n        type: \"ADD_ALERT\",\n        payload: {\n          id,\n          type: \"confirm\",\n          open: true,\n          props,\n        },\n      });\n    },\n    []\n  );\n\n  // Show delete confirm alert action\n  const confirmAlertDelete = useCallback(\n    (props: Omit<ConfirmAlertDeleteProps, \"open\" | \"onOpenChange\">) => {\n      const id = generateId();\n      dispatch({\n        type: \"ADD_ALERT\",\n        payload: {\n          id,\n          type: \"delete\",\n          open: true,\n          props,\n        },\n      });\n    },\n    []\n  );\n\n  const value = {\n    alerts: state.alerts,\n    confirmAlert,\n    confirmAlertDelete,\n    handleOpenChange,\n  };\n\n  return (\n    <AlertContext.Provider value={value}>\n      {children}\n      <AlertRenderer />\n    </AlertContext.Provider>\n  );\n};\n\n// Alert renderer component\nexport const AlertRenderer = React.memo(() => {\n  const context = useContext(AlertContext);\n\n  if (!context) {\n    return null;\n  }\n\n  const { alerts, handleOpenChange } = context;\n\n  if (alerts.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      {alerts.map((alert) => {\n        const onOpenChange = (open: boolean) =>\n          handleOpenChange(alert.id, open);\n\n        if (alert.type === \"confirm\") {\n          const { props } = alert as ConfirmAlertData;\n\n          return (\n            <ConfirmAlert\n              key={alert.id}\n              open={alert.open}\n              onOpenChange={onOpenChange}\n              {...props}\n            />\n          );\n        }\n\n        if (alert.type === \"delete\") {\n          const { props } = alert as DeleteAlertData;\n\n          return (\n            <ConfirmAlertDelete\n              key={alert.id}\n              open={alert.open}\n              onOpenChange={onOpenChange}\n              {...props}\n            />\n          );\n        }\n\n        return null;\n      })}\n    </>\n  );\n});\n\nAlertRenderer.displayName = \"AlertRenderer\";\n\n// Custom hook for using alerts\nexport const useAlerts = () => {\n  const context = useContext(AlertContext);\n\n  if (context === undefined) {\n    throw new Error(\"useAlerts must be used within an AlertProvider\");\n  }\n\n  return context;\n};\n"
    }
  ]
}
