{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "theme-switch-slider",
  "type": "registry:component",
  "title": "Theme Switch Slider",
  "description": "A beautiful animated theme switcher with a sliding control and animated stars",
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/new-york/theme-switch-slider/ThemeSwitchSlider.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { cn, ReactFC } from \"@/lib/utils\";\nimport { LucideMoon } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\nexport interface ThemeSwitchSliderProps {\n  theme: string;\n  setTheme: (theme: string) => void;\n  isDark: boolean;\n  toggleTheme: () => void;\n  className?: string;\n}\n\nexport const ThemeSwitchSlider: ReactFC<ThemeSwitchSliderProps> = ({\n  isDark,\n  toggleTheme,\n  className,\n}) => {\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    return <div className={cn(\"h-[34px] w-[60px]\", className)} />;\n  }\n\n  return (\n    <motion.button\n      onClick={toggleTheme}\n      className={cn(\n        \"relative cursor-pointer h-[34px] w-[60px] rounded-2xl p-1 transition-colors duration-200\",\n        \"hover:scale-105 active:scale-100\",\n        isDark\n          ? \"bg-violet-900/80 hover:bg-violet-900\"\n          : \"bg-sky-400/40 hover:bg-sky-400/60\",\n        className\n      )}\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.98 }}\n    >\n      {/* Stars */}\n      <div className=\"relative left-0 bottom-[12px]\">\n        {[...Array(6)].map((_, i) => {\n          const size = i % 2 === 0 ? 2 : 1;\n          const positions = [\n            { x: 10, y: 3 },\n            { x: 3, y: 7 },\n            { x: 12, y: 18 },\n            { x: 15, y: 10 },\n            { x: 19, y: 4 },\n            { x: 22, y: 14 },\n          ];\n\n          return (\n            <motion.div\n              key={i}\n              className={cn(\n                \"absolute rounded-full bg-white/90\",\n                size === 2 ? \"h-[2px] w-[2px]\" : \"h-[1px] w-[1px]\"\n              )}\n              style={{\n                left: positions[i].x,\n                top: positions[i].y,\n              }}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{\n                opacity: isDark ? 1 : 0,\n                y: isDark ? 0 : 10,\n                scale: isDark ? [1, 1.2, 1] : 1,\n              }}\n              transition={{\n                duration: 0.2,\n                delay: i * 0.05,\n                scale: {\n                  repeat: Infinity,\n                  duration: 2,\n                  delay: i * 0.3,\n                },\n              }}\n            />\n          );\n        })}\n      </div>\n\n      {/* Sun/Moon Circle */}\n      <motion.div\n        className={cn(\n          \"absolute top-0 bottom-0 my-auto h-7 w-7 rounded-full\",\n          \"flex items-center justify-center\",\n          \"transition-colors duration-200\",\n          isDark\n            ? \"border-2 border-white/90 bg-white/40\"\n            : \"border-2 border-amber-400/70 bg-amber-200\"\n        )}\n        animate={{\n          x: isDark ? 24 : 0,\n        }}\n        transition={{\n          type: \"spring\",\n          stiffness: 300,\n          damping: 25,\n        }}\n      >\n        <AnimatePresence mode=\"wait\">\n          {isDark && (\n            <motion.div\n              key=\"moon\"\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              exit={{ scale: 0 }}\n            >\n              <LucideMoon className=\"h-4 w-4 text-white\" />\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </motion.div>\n    </motion.button>\n  );\n};\n"
    }
  ]
}