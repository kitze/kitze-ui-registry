{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "responsive-select",
  "type": "registry:component",
  "title": "Responsive Select",
  "description": "A responsive select component that changes its appearance on mobile devices based on the specified mode.",
  "registryDependencies": [
    "https://ui.kitze.io/r/simple-select.json",
    "https://ui.kitze.io/r/bottom-drawer.json",
    "https://ui.kitze.io/r/kitze-ui-context.json"
  ],
  "files": [
    {
      "path": "registry/new-york/responsive-select/ResponsiveSelect.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { SelectOption } from \"@/lib/select-option\";\nimport { SimpleSelect } from \"@/registry/new-york/simple-select/SimpleSelect\";\nimport { BottomDrawerMenu } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenu\";\nimport { BottomDrawerMenuItem } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenuItem\";\nimport { useKitzeUI } from \"@/registry/new-york/kitze-ui-context/KitzeUIContext\";\nimport { useControlledOpen } from \"@/registry/hooks/useControlledOpen\";\n\nexport type MobileViewType = \"native\" | \"bottom-drawer\";\n\nexport interface ResponsiveSelectProps {\n  options: SelectOption[];\n  value?: string;\n  onValueChange?: (value: string) => void;\n  placeholder?: string;\n  className?: string;\n  triggerClassName?: string;\n  disabled?: boolean;\n  mobileView?: MobileViewType;\n  drawerTitle?: string;\n}\n\nexport function ResponsiveSelect({\n  options,\n  value,\n  onValueChange,\n  placeholder = \"Select an option\",\n  className,\n  triggerClassName,\n  disabled,\n  mobileView = \"bottom-drawer\",\n  drawerTitle = \"Select an option\",\n}: ResponsiveSelectProps) {\n  const { isMobile } = useKitzeUI();\n  const { isOpen, setIsOpen, close } = useControlledOpen({});\n\n  // Find the selected option to display on the trigger\n  const selectedOption = options.find((option) => option.value === value);\n  const displayText = selectedOption\n    ? selectedOption.label || selectedOption.value\n    : placeholder;\n\n  // Render a native select for mobile when that option is chosen\n  if (isMobile && mobileView === \"native\") {\n    return (\n      <div className={cn(\"relative\", className)}>\n        <div\n          className={cn(\n            \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n            triggerClassName\n          )}\n        >\n          <span className=\"flex-grow truncate\">{displayText}</span>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"ml-2 h-4 w-4 opacity-50\"\n          >\n            <path d=\"m6 9 6 6 6-6\" />\n          </svg>\n        </div>\n        <select\n          value={value}\n          onChange={(e) => onValueChange?.(e.target.value)}\n          disabled={disabled}\n          className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n        >\n          <option value=\"\" disabled hidden>\n            {placeholder}\n          </option>\n          {options.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label || option.value}\n            </option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n\n  // Render a bottom drawer for mobile when that option is chosen\n  if (isMobile && mobileView === \"bottom-drawer\") {\n    return (\n      <BottomDrawerMenu\n        title={drawerTitle}\n        open={isOpen}\n        onOpenChange={setIsOpen}\n        content={\n          <div className=\"flex flex-col\">\n            {options.map((option) => (\n              <BottomDrawerMenuItem\n                key={option.value}\n                leftIcon={option.icon}\n                emoji={option.emoji}\n                closeOnClick={option.closeOnClick}\n                onClick={() => {\n                  onValueChange?.(option.value);\n                }}\n                className={value === option.value ? \"bg-muted\" : \"\"}\n              >\n                {option.label || option.value}\n              </BottomDrawerMenuItem>\n            ))}\n          </div>\n        }\n      >\n        <button\n          className={cn(\n            \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n            triggerClassName,\n            className\n          )}\n          onClick={() => setIsOpen(true)}\n          disabled={disabled}\n        >\n          <span className=\"flex-grow truncate\">{displayText}</span>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"ml-2 h-4 w-4 opacity-50\"\n          >\n            <path d=\"m6 9 6 6 6-6\" />\n          </svg>\n        </button>\n      </BottomDrawerMenu>\n    );\n  }\n\n  // Default to SimpleSelect for desktop\n  return (\n    <SimpleSelect\n      options={options}\n      value={value}\n      onValueChange={onValueChange}\n      placeholder={placeholder}\n      className={className}\n      triggerClassName={triggerClassName}\n      disabled={disabled}\n    />\n  );\n}\n"
    }
  ]
}