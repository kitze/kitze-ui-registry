{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "responsive-select",
  "type": "registry:component",
  "title": "Responsive Select",
  "description": "A responsive select component that changes its appearance on mobile devices and supports search functionality.",
  "registryDependencies": [
    "button",
    "command",
    "popover"
  ],
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/new-york/responsive-select/ResponsiveSelect.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { ChevronsUpDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { SelectOption } from \"@/lib/select-option\";\nimport { SimpleSelect } from \"@/registry/new-york/simple-select/SimpleSelect\";\nimport { BottomDrawerMenu } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenu\";\nimport { BottomDrawerMenuItem } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenuItem\";\nimport { useKitzeUI } from \"@/registry/new-york/kitze-ui-context/KitzeUIContext\";\nimport { useControlledOpen } from \"@/registry/hooks/useControlledOpen\";\nimport { ResponsiveSelectBottomDrawerMenu } from \"./ResponsiveSelectBottomDrawerMenu\";\nimport { Button } from \"@/components/ui/button\";\n\nexport type MobileViewType = \"native\" | \"bottom-drawer\";\n\nexport interface ResponsiveSelectProps {\n  options: SelectOption[];\n  value?: string;\n  onValueChange?: (value: string) => void;\n  placeholder?: string;\n  className?: string;\n  triggerClassName?: string;\n  disabled?: boolean;\n  mobileView?: MobileViewType;\n  drawerTitle?: string;\n  withSearch?: boolean;\n  searchPlaceholder?: string;\n}\n\nexport function ResponsiveSelect({\n  options,\n  value,\n  onValueChange,\n  placeholder = \"Select an option\",\n  className,\n  triggerClassName,\n  disabled,\n  mobileView = \"bottom-drawer\",\n  drawerTitle = \"Select an option\",\n  withSearch = false,\n  searchPlaceholder = \"Search options...\",\n}: ResponsiveSelectProps) {\n  const { isMobile } = useKitzeUI();\n  const { isOpen, setIsOpen, close } = useControlledOpen({});\n\n  // Find the selected option to display on the trigger\n  const selectedOption = options.find((option) => option.value === value);\n\n  // Create the trigger button\n  const triggerButton = (\n    <Button\n      variant=\"outline\"\n      role=\"combobox\"\n      className={cn(\"w-full justify-between\", triggerClassName, className)}\n      onClick={() => setIsOpen(true)}\n      disabled={disabled}\n    >\n      {value && selectedOption ? (\n        <span className=\"flex items-center truncate\">\n          {selectedOption.icon &&\n            React.createElement(selectedOption.icon, {\n              className: \"mr-2 h-4 w-4\",\n            })}\n          {selectedOption.emoji && (\n            <span className=\"mr-2\">{selectedOption.emoji}</span>\n          )}\n          {selectedOption.label || selectedOption.value}\n        </span>\n      ) : (\n        placeholder\n      )}\n      <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n    </Button>\n  );\n\n  // Render a native select for mobile when that option is chosen\n  if (isMobile && mobileView === \"native\") {\n    return (\n      <div className={cn(\"relative\", className)}>\n        <div\n          className={cn(\n            \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n            triggerClassName\n          )}\n        >\n          <span className=\"flex-grow truncate\">\n            {selectedOption?.icon &&\n              React.createElement(selectedOption.icon, {\n                className: \"mr-2 h-4 w-4 inline\",\n              })}\n            {selectedOption?.emoji && (\n              <span className=\"mr-2\">{selectedOption.emoji}</span>\n            )}\n            {value && selectedOption\n              ? selectedOption.label || value\n              : placeholder}\n          </span>\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 opacity-50\" />\n        </div>\n        <select\n          value={value}\n          onChange={(e) => onValueChange?.(e.target.value)}\n          disabled={disabled}\n          className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n        >\n          <option value=\"\" disabled hidden>\n            {placeholder}\n          </option>\n          {options.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label || option.value}\n            </option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n\n  // Render a bottom drawer for mobile when that option is chosen\n  if (isMobile && mobileView === \"bottom-drawer\") {\n    // Use the new component when withSearch is true\n    if (withSearch) {\n      return (\n        <ResponsiveSelectBottomDrawerMenu\n          options={options}\n          value={value}\n          onValueChange={onValueChange}\n          placeholder={placeholder}\n          drawerTitle={drawerTitle}\n          open={isOpen}\n          onOpenChange={setIsOpen}\n          searchPlaceholder={searchPlaceholder}\n          triggerClassName={triggerClassName}\n          className={className}\n          disabled={disabled}\n        >\n          {triggerButton}\n        </ResponsiveSelectBottomDrawerMenu>\n      );\n    }\n\n    // Otherwise use the original bottom drawer implementation\n    return (\n      <BottomDrawerMenu\n        title={drawerTitle}\n        open={isOpen}\n        onOpenChange={setIsOpen}\n        content={\n          <div className=\"flex flex-col\">\n            {options.map((option) => (\n              <BottomDrawerMenuItem\n                key={option.value}\n                leftIcon={option.icon}\n                emoji={option.emoji}\n                closeOnClick={true}\n                onClick={() => {\n                  onValueChange?.(option.value);\n                  setIsOpen(false);\n                }}\n                className={value === option.value ? \"bg-muted\" : \"\"}\n              >\n                {option.label || option.value}\n              </BottomDrawerMenuItem>\n            ))}\n          </div>\n        }\n      >\n        {triggerButton}\n      </BottomDrawerMenu>\n    );\n  }\n\n  // Default to SimpleSelect for desktop\n  return (\n    <SimpleSelect\n      options={options}\n      value={value}\n      onValueChange={onValueChange}\n      placeholder={placeholder}\n      className={className}\n      triggerClassName={triggerClassName}\n      disabled={disabled}\n      withSearch={withSearch}\n      searchPlaceholder={searchPlaceholder}\n    />\n  );\n}\n"
    },
    {
      "path": "registry/new-york/responsive-select/ResponsiveSelectBottomDrawerMenu.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { SelectOption } from \"@/lib/select-option\";\nimport { BottomDrawerMenu } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenu\";\nimport { BottomDrawerMenuItem } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenuItem\";\nimport { SearchBar } from \"@/registry/new-york/search-bar/SearchBar\";\n\nexport interface ResponsiveSelectBottomDrawerMenuProps {\n  options: SelectOption[];\n  value?: string;\n  onValueChange?: (value: string) => void;\n  placeholder?: string;\n  drawerTitle?: string;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  searchPlaceholder?: string;\n  triggerClassName?: string;\n  className?: string;\n  disabled?: boolean;\n  children?: React.ReactNode;\n}\n\nexport function ResponsiveSelectBottomDrawerMenu({\n  options,\n  value,\n  onValueChange,\n  placeholder = \"Select an option\",\n  drawerTitle = \"Select an option\",\n  open,\n  onOpenChange,\n  searchPlaceholder = \"Search options...\",\n  triggerClassName,\n  className,\n  disabled,\n  children,\n}: ResponsiveSelectBottomDrawerMenuProps) {\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n\n  // Filter options based on search query\n  const filteredOptions = React.useMemo(() => {\n    if (!searchQuery.trim()) return options;\n\n    const lowercaseQuery = searchQuery.toLowerCase();\n    return options.filter((option) => {\n      const label = (option.label || option.value).toLowerCase();\n      return label.includes(lowercaseQuery);\n    });\n  }, [options, searchQuery]);\n\n  return (\n    <BottomDrawerMenu\n      title={drawerTitle}\n      open={open}\n      onOpenChange={onOpenChange}\n      content={\n        <div className=\"flex flex-col\">\n          <div className=\"p-3\">\n            <SearchBar\n              value={searchQuery}\n              onChange={setSearchQuery}\n              placeholder={searchPlaceholder}\n              autoFocus\n            />\n          </div>\n          {filteredOptions.length === 0 ? (\n            <div className=\"py-4 px-3 text-center text-muted-foreground\">\n              No options found\n            </div>\n          ) : (\n            filteredOptions.map((option) => (\n              <BottomDrawerMenuItem\n                key={option.value}\n                leftIcon={option.icon}\n                emoji={option.emoji}\n                closeOnClick={option.closeOnClick}\n                onClick={() => {\n                  onValueChange?.(option.value);\n                  onOpenChange(false);\n                }}\n                className={value === option.value ? \"bg-muted\" : \"\"}\n              >\n                {option.label || option.value}\n              </BottomDrawerMenuItem>\n            ))\n          )}\n        </div>\n      }\n    >\n      {children}\n    </BottomDrawerMenu>\n  );\n}\n"
    }
  ]
}