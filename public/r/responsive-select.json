{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "responsive-select",
  "type": "registry:component",
  "title": "Responsive Select",
  "description": "A responsive select component that changes its appearance on mobile devices and supports search functionality.",
  "registryDependencies": [
    "button",
    "command",
    "popover"
  ],
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/new-york/responsive-select/ResponsiveSelect.tsx",
      "type": "registry:component",
      "content": "/* File not found: registry/new-york/responsive-select/ResponsiveSelect.tsx */"
    },
    {
      "path": "registry/new-york/responsive-select/ResponsiveSelectBottomDrawerMenu.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { SelectOption } from \"@/lib/select-option\";\nimport { BottomDrawerMenu } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenu\";\nimport { BottomDrawerMenuItem } from \"@/registry/new-york/bottom-drawer/BottomDrawerMenuItem\";\nimport { SearchBar } from \"@/registry/new-york/search-bar/SearchBar\";\n\nexport interface ResponsiveSelectBottomDrawerMenuProps {\n  options: SelectOption[];\n  value?: string;\n  onValueChange?: (value: string) => void;\n  placeholder?: string;\n  drawerTitle?: string;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  searchPlaceholder?: string;\n  triggerClassName?: string;\n  className?: string;\n  disabled?: boolean;\n  children?: React.ReactNode;\n}\n\nexport function ResponsiveSelectBottomDrawerMenu({\n  options,\n  value,\n  onValueChange,\n  placeholder = \"Select an option\",\n  drawerTitle = \"Select an option\",\n  open,\n  onOpenChange,\n  searchPlaceholder = \"Search options...\",\n  triggerClassName,\n  className,\n  disabled,\n  children,\n}: ResponsiveSelectBottomDrawerMenuProps) {\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n\n  // Filter options based on search query\n  const filteredOptions = React.useMemo(() => {\n    if (!searchQuery.trim()) return options;\n\n    const lowercaseQuery = searchQuery.toLowerCase();\n    return options.filter((option) => {\n      const label = (option.label || option.value).toLowerCase();\n      return label.includes(lowercaseQuery);\n    });\n  }, [options, searchQuery]);\n\n  return (\n    <BottomDrawerMenu\n      title={drawerTitle}\n      open={open}\n      onOpenChange={onOpenChange}\n      content={\n        <div className=\"flex flex-col\">\n          <div className=\"p-3\">\n            <SearchBar\n              value={searchQuery}\n              onChange={setSearchQuery}\n              placeholder={searchPlaceholder}\n              autoFocus\n            />\n          </div>\n          {filteredOptions.length === 0 ? (\n            <div className=\"py-4 px-3 text-center text-muted-foreground\">\n              No options found\n            </div>\n          ) : (\n            filteredOptions.map((option) => (\n              <BottomDrawerMenuItem\n                key={option.value}\n                leftIcon={option.icon}\n                emoji={option.emoji}\n                closeOnClick={option.closeOnClick}\n                onClick={() => {\n                  onValueChange?.(option.value);\n                  onOpenChange(false);\n                }}\n                className={value === option.value ? \"bg-muted\" : \"\"}\n              >\n                {option.label || option.value}\n              </BottomDrawerMenuItem>\n            ))\n          )}\n        </div>\n      }\n    >\n      {children}\n    </BottomDrawerMenu>\n  );\n}\n"
    }
  ]
}